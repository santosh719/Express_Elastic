{
  "title": "Standardization[edit]",
  "content": "C++ was built atop the C language and as a result divergent ways of doing the same thing manifested around the language. For instance, creating an object could be done in three different ways in C++. Furthermore, C++ did not come with a standard library bundled with its compilers. Instead, it relied on resources created by other programmers; code which rarely fit together.In Java, standardized libraries are provided to allow access to features of the host machines (such as graphics and networking) in unified ways. The Java language also includes support for multi-threaded programsa necessity for many networking applications.Platform independent Java is, however, very successful with server side applications, such as web services, servlets, or Enterprise JavaBeans.Swing does not rely on the underlying native user interface.Java also made progress on the client side, first it had Abstract Window Toolkit (AWT), then Swing, and the most recent client side library is the Standard Widget Toolkit (SWT). It is interesting to see how they tried to handle the two opposing consuming forces. Those are:Efficient, fast code; port to most popular hardware (write once, test anywhere)\nUse the underlying native subroutine to create a GUI component. This approach was taken by AWT, and SWT.Portability to any hardware where JVM ported (write once, run anywhere)\nTo achieve this to the latter, the Java toolkit should not rely on the underlying native user interface. Swing took this approach.It is interesting to see how the approach was switched back and forth. AWT  Swing  SWT."
}