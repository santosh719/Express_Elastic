{
  "title": "Conditional blocks",
  "content": "Navigate Language Fundamentals topic: (vde)\n\n Statements\n Conditional blocks\n Loop blocks\n Boolean expressions\n Variables\n Primitive Types\n Arithmetic expressions\n Literals\n Methods\n String\n Objects\n Packages\n Arrays\n Mathematical functions\n Large numbers\n Random numbers\n Unicode\n Comments\n Keywords\n Coding conventionsConditional blocks allow a program to take a different path depending on some condition(s). These allow a program to perform a test and then take action based on the result of that test. In the code sections, the actually executed code lines will be highlighted.If[edit]The if block executes only if the boolean expression associated with it is true. The structure of an if block is as follows:if (boolean expression1) {\n\nstatement1\nstatement2\n...\nstatementn\n\n}Here is a double example to illustrate what happens if the condition is true and if the condition is false:Code section 3.22: Two if blocks.\n\n\n 1 int age = 6;\n 2 System.out.println(\"Hello!\");\n 3 \n 4 if (age < 13) {\n 5   System.out.println(\"I'm a child.\");\n 6 }\n 7 \n 8 if (age > 20) {\n 9   System.out.println(\"I'm an adult.\");\n10 }\n11 \n12 System.out.println(\"Bye!\");\n\n\n\n\n\n\n\n\n\n\nOutput for Code section 3.22\n\nHello!\nI'm a child\nBye!If only one statement is to be executed after an if block, it does not have to be enclosed in curly braces. For example, if (i == 0) i = 1; is a perfectly valid portion of Java code. This works for most control structures, such as else and while. However Oracle's Java Code Conventions explicitly state that the braces should always be used.If/else[edit]The if block may optionally be followed by an else block which will execute if that boolean expression is false. The structure of an if block is as follows:if (boolean expression1) {\n\nstatement1\nstatement2\n...\nstatementn\n\n} else {\n\nstatement1bis\nstatement2bis\n...\nstatementnbis\n\n}If/else-if/else[edit]An else-if block may be used when multiple conditions need to be checked. else-if statements come after the if block, but before the else block. The structure of an if block is as follows:if (boolean expression1) {\n\nstatement1.1\nstatement1.2\n...\nstatementn\n\n} else if (boolean expression2) {\n\nstatement2.1\nstatement2.2\n...\nstatement2.n\n\n} else {\n\nstatement3.1\nstatement3.2\n...\nstatement3.n\n\n}Here is an example to illustrate:Code listing 3.3: MyConditionalProgram.java\n\n\n 1 public class MyConditionalProgram {\n 2     public static void main (String[] args) {\n 3       int a = 5;\n 4       if (a > 0) {\n 5           // a is greater than 0, so this statement will execute\n 6           System.out.println(\"a is positive\");\n 7       } else if (a >= 0) {\n 8           // a case has already executed, so this statement will NOT execute\n 9           System.out.println(\"a is positive or zero\");\n10       } else {\n11           // a case has already executed, so this statement will NOT execute\n12           System.out.println(\"a is negative\");\n13       }\n14     }\n15 }\n\n\n\n\n\n\n\n\n\nOutput for code listing 3.3\n\na is positiveKeep in mind that only a single block will execute, and it will be the first true condition.All the conditions are evaluated when if is reached, no matter what the result of the condition is, after the execution of the if block:Code section 3.23: A new value for the variable a.\n\n\n 1 int a = 5;\n 2 if (a > 0) {\n 3     // a is greater than 0, so this statement will execute\n 4     System.out.println(\"a is positive\");\n 5     a = -5;\n 6 } else if (a < 0) {\n 7     // a WAS greater than 0, so this statement will not execute\n 8     System.out.println(\"a is negative\");\n 9 } else {\n10     // a does not equal 0, so this statement will not execute\n11     System.out.println(\"a is zero\");\n12 }\n\n\n\n\n\n\n\n\n\nOutput for code section 3.23\n\na is positiveConditional expressions[edit]Conditional expressions use the compound ?: operator. Syntax:boolean expression1? expression1: expression2This evaluates boolean expression1, and if it is true then the conditional expression has the value of expression1; otherwise the conditional expression has the value of expression2.Example:Code section 3.24: Conditional expressions.\n\n\n1 String answer = (p < 0.05)? \"reject\" : \"keep\";This is equivalent to the following code fragment:Code section 3.25: Equivalent code.\n\n\n1 String answer;\n2 if (p < 0.05) {\n3     answer = \"reject\";\n4 } else {\n5     answer = \"keep\";\n6 }Switch[edit]The switch conditional statement is basically a shorthand version of writing many if...else statements. The switch block evaluates a char, byte, short, or int (or enum, starting in J2SE 5.0; or String, starting in J2SE 7.0), and, based on the value provided, jumps to a specific case within the switch block and executes code until the break command is encountered or the end of the block. If the switch value does not match any of the case values, execution will jump to the optional default case.The structure of a switch statement is as follows:switch (int1 or char1 or short1 or byte1 or enum1 or String value1) {\n\ncase case value1:\n\nstatement1.1\n...\nstatement1.n\nbreak;\n\n\ncase case value2:\n\nstatement2.1\n...\nstatement2.n\nbreak;\n\n\ndefault:\n\nstatementn.1\n...\nstatementn.n\n\n\n\n}Here is an example to illustrate:Code section 3.26: A switch block.\n\n\n 1 int i = 3;\n 2 switch(i) {\n 3     case 1:\n 4         // i doesn't equal 1, so this code won't execute\n 5         System.out.println(\"i equals 1\");\n 6         break;\n 7     case 2:\n 8         // i doesn't equal 2, so this code won't execute\n 9         System.out.println(\"i equals 2\");\n10         break;\n11     default:\n12         // i has not been handled so far, so this code will execute\n13         System.out.println(\"i equals something other than 1 or 2\");\n14 }\n\n\n\n\n\n\n\n\n\nOutput for code section 3.26\n\ni equals something other than 1 or 2If a case does not end with the break statement, then the next case will be checked, otherwise the execution will jump to the end of the switch statement.Look at this example to see how it's done:Code section 3.27: A switch block containing a case without break.\n\n\n 1 int i = -1;\n 2 switch(i) {\n 3     case -1:\n 4     case 1:\n 5         // i is -1, so it will fall through to this case and execute this code\n 6         System.out.println(\"i is 1 or -1\");\n 7         break;\n 8     case 0:\n 9         // The break command is used before this case, so if i is 1 or -1, this will not execute\n10         System.out.println(\"i is 0\");\n11 }\n\n\n\n\n\n\n\n\n\nOutput for code section 3.27\n\ni is 1 or -1Starting in J2SE 5.0, the switch statement can also be used with an enum value instead of an integer.Though enums have not been covered yet, here is an example so you can see how it's done (note that the enum constants in the cases do not need to be qualified with the type:Code section 3.28: A switch block with an enum type.\n\n\n 1 Day day = Day.MONDAY; // Day is a fictional enum type containing the days of the week\n 2 switch(day) {\n 3     case MONDAY:\n 4         // Since day == Day.MONDAY, this statement will execute\n 5         System.out.println(\"Mondays are the worst!\");\n 6         break;\n 7     case TUESDAY:\n 8     case WEDNESDAY:\n 9     case THURSDAY:\n10         System.out.println(\"Weekdays are so-so.\");\n11         break;\n12     case FRIDAY:\n13     case SATURDAY:\n14     case SUNDAY:\n15         System.out.println(\"Weekends are the best!\");\n16         break;\n17 }\n\n\n\n\n\n\n\n\n\nOutput for code section 3.28\n\nMondays are the worst!Starting in J2SE 7.0, the switch statement can also be used with an String value instead of an integer.Code section 3.29: A switch block with a String type.\n\n\n 1 String day = \"Monday\";\n 2 switch(day) {\n 3     case \"Monday\":\n 4         // Since day == \"Monday\", this statement will execute\n 5         System.out.println(\"Mondays are the worst!\");\n 6         break;\n 7     case \"Tuesday\":\n 8     case \"Wednesday\":\n 9     case \"Thursday\":\n10         System.out.println(\"Weekdays are so-so.\");\n11         break;\n12     case \"Friday\":\n13     case \"Saturday\":\n14     case \"Sunday\":\n15         System.out.println(\"Weekends are the best!\");\n16         break;\n17     default:\n18         throw new IllegalArgumentException(\"Invalid day of the week: \" + day);\n19 }\n\n\n\n\n\n\n\n\n\nOutput for code section 3.29\n\nMondays are the worst!"
}