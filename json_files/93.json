{
  "title": "Data conversion (casting)[edit]",
  "content": "Data conversion (casting) can happen between two primitive types. There are two kinds of casting:Implicit: casting operation is not required; the magnitude of the numeric value is always preserved. However, precision may be lost when converting from integer to floating point types\nExplicit: casting operation required; the magnitude of the numeric value may not be preservedCode section 3.58: Implicit casting (int is converted to long, casting is not needed).\n\n\n1 int  i = 65;\n2 long l = i;Code section 3.59: Explicit casting (long is converted to int, casting is needed).\n\n\n1 long l = 656666L;\n2 int  i = (int) l;The following table shows the conversions between primitive types, it shows the casting operation for explicit conversions:from byte\nfrom char\nfrom short\nfrom int\nfrom long\nfrom float\nfrom double\nfrom boolean\n\n\nto byte\n-\n(byte)\n(byte)\n(byte)\n(byte)\n(byte)\n(byte)\nN/A\n\n\nto char\n\n-\n(char)\n(char)\n(char)\n(char)\n(char)\nN/A\n\n\nto short\n\n(short)\n-\n(short)\n(short)\n(short)\n(short)\nN/A\n\n\nto int\n\n\n\n-\n(int)\n(int)\n(int)\nN/A\n\n\nto long\n\n\n\n\n-\n(long)\n(long)\nN/A\n\n\nto float\n\n\n\n\n\n-\n(float)\nN/A\n\n\nto double\n\n\n\n\n\n\n-\nN/A\n\n\nto boolean\nN/A\nN/A\nN/A\nN/A\nN/A\nN/A\nN/A\n-Unlike C, C++ and similar languages, Java can't represent false as 0 or null and can't represent true as non-zero. Java can't cast from boolean to a non-boolean primitive data type, or vice versa.For non primitive types:to Integer\nto Float\nto Double\nto String\nto Array\n\n\nInteger\n-\n(float)x\n(double)x\nx.doubleValue()\nx.toString()\nFloat.toString(x)\nnew int[] {x}\n\n\nFloat\njava.text.DecimalFormat(\"#\").format(x)\n-\n(double)x\nx.toString()\nnew float[] {x}\n\n\nDouble\njava.text.DecimalFormat(\"#\").format(x)\njava.text.DecimalFormat(\"#\").format(x)\n-\nx.toString()\nnew double[] {x}\n\n\nString\nInteger.parseInt(x)\nFloat.parseFloat(x)\nDouble.parseDouble(x)\n-\nnew String[] {x}\n\n\nArray\nx[0]\nx[0]\nx[0]\nArrays.toString(x)\n-"
}