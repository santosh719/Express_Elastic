{
  "title": "Method overloading[edit]",
  "content": "In a class, there can be several methods with the same name. However they must have a different signature. The signature of a method is comprised of its name, its parameter types and the order of its parameters. The signature of a method is not comprised of its return type nor its visibility nor the exceptions it may throw. The practice of defining two or more methods within the same class that share the same name but have different parameters is called overloading methods.Methods with the same name in a class are called overloaded methods. Overloading methods offers no specific benefit to the JVM but it is useful to the programmer to have several methods do the same things but with different parameters. For example, we may have the operation runAroundThe represented as two methods with the same name, but different input parameter types:Code section 4.22: Method overloading.\n\n\n1 public void runAroundThe(Building block) {\n2   ...\n3 }\n4 \n5 public void runAroundThe(Park park) {\n6   ...\n7 }One type can be the subclass of the other:Code listing 4.11: ClassName.java\n\n\n 1 public class ClassName {\n 2 \n 3   public static void sayClassName(Object aObject) {\n 4     System.out.println(\"Object\");\n 5   }\n 6 \n 7   public static void sayClassName(String aString) {\n 8     System.out.println(\"String\");\n 9   }\n10 \n11   public static void main(String[] args) {\n12     String aString = new String();\n13     sayClassName(aString);\n14 \n15     Object aObject = new String();\n16     sayClassName(aObject);\n17   }\n18 }\n\n\n\n\n\n\n\n\n\nConsole for Code listing 4.11\n\nString\nObjectAlthough both methods would be fit to call the method with the String parameter, it is the method with the nearest type that will be called instead. To be more accurate, it will call the method whose parameter type is a subclass of the parameter type of the other method. So, aObject will output Object. Beware! The parameter type is defined by the declared type of an object, not its instantiated type!The following two method definitions are validCode section 4.23: Method overloading with the type order.\n\n\n1 public void logIt(String param, Error err) {\n2   ...\n3 }\n4 \n5 public void logIt(Error err, String param) {\n6   ...\n7 }because the type order is different. If both input parameters were type String, that would be a problem since the compiler would not be able to distinguish between the two:Code section 4.24: Bad method overloading.\n\n\n1 public void logIt(String param, String err) {\n2   ...\n3 }\n4 \n5 public void logIt(String err, String param) {\n6   ...\n7 }The compiler would give an error for the following method definitions as well:Code section 4.25: Another bad method overloading.\n\n\n1 public void logIt(String param) {\n2   ...\n3 }\n4 \n5 public String logIt(String param) {\n6   String retValue;\n7   ...\n8   return retValue;\n9 }Note, the return type is not part of the unique signature. Why not? The reason is that a method can be called without assigning its return value to a variable. This feature came from C and C++. So for the call:Code section 4.26: Ambiguous method call.\n\n\n1 logIt(msg);the compiler would not know which method to call. It is also the case for the thrown exceptions.Test your knowledge\n\nQuestion 4.6: Which methods of the Question6 class will cause compile errors?\n\n\n\nQuestion6.java\n\n\n 1 public class Question6 {\n 2  \n 3   public void example1() {\n 4   }\n 5 \n 6   public int example1() {\n 7   }\n 8 \n 9   public void example2(int x) {\n10   }\n11 \n12   public void example2(int y) {\n13   }\n14 \n15   private void example3() {\n16   }\n17 \n18   public void example3() {\n19   }\n20 \n21   public String example4(int x) {\n22     return null;\n23   }\n24 \n25   public String example4() {\n26     return null;\n27   }\n28 }\n\n\n\n\n\nAnswer\n\n\n\n\nQuestion6.java\n\n\n 1 public class Question6 {\n 2  \n 3   public void example1() {\n 4   }\n 5 \n 6   public int example1() {\n 7   }\n 8 \n 9   public void example2(int x) {\n10   }\n11 \n12   public void example2(int y) {\n13   }\n14 \n15   private void example3() {\n16   }\n17 \n18   public void example3() {\n19   }\n20 \n21   public String example4(int x) {\n22     return null;\n23   }\n24 \n25   public String example4() {\n26     return null;\n27   }\n28 }\n\n\n\n\nThe example1, example2 and example3 methods will cause compile errors. The example1 methods cannot co-exist because they have the same signature (remember, return type is not part of the signature). The example2 methods cannot co-exist because the names of the parameters are not part of the signature. The example3 methods cannot co-exist because the visibility of the methods are not part of the signature. The example4 methods can co-exist, because they have different method signatures."
}