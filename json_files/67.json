{
  "title": "Iteration Statements[edit]",
  "content": "Iteration Statements are statements that are used to iterate a block of statements. Such statements are often referred to as loops. Java offers four kinds of iterative statements.The while loop\nThe do...while loop\nThe for loop\nThe foreach loopThe while loop[edit]Main page: Java Programming/Keywords/whileThe while loop iterates a block of code while the condition it specifies is true.The syntax for the loop is:while (condition) {\n   statement;\n }Here the condition is an expression. An expression as discussed earlier is any statement that returns a value. While condition statements evaluate to a boolean value, that is, either true or false. As long as the condition is true, the loop will iterate the block of code over and over and again. Once the condition evaluates to false, the loop exits to the next statement outside the loop.The do...while loop[edit]The do-while loop is functionally similar to the while loop, except the condition is evaluated AFTER the statement executesdo {\n   statement;\n } while (condition);The for loop[edit]Main page: Java Programming/Keywords/forThe for loop is a specialized while loop whose syntax is designed for easy iteration through a sequence of numbers. Example:Code section 3.16: A for loop.\n\n\n1 for (int i = 0; i < 100; i++) {\n2   System.out.println(i + \"\\t\" + i * i);\n3 }\n\n\n\n\n\n\n\n\n\nOutput for code listing 3.16 if you compile and run the statement above.\n\n 0      0\n 1      1\n 2      4\n 3      9\n ...\n 99     9801The program prints the numbers 0 to 99 and their squares.The same statement in a while loop:Code section 3.17: An alternative version.\n\n\n1 int i = 0;\n2 while (i < 100) {\n3    System.out.println(i + \"\\t\" + i * i);\n4    i++;\n5 }The foreach loop[edit]The foreach statement allows you to iterate through all the items in a collection, examining each item in turn while still preserving its type. The syntax for the foreach statement is:for (type item : collection) statement;For an example, we'll take an array of Strings denoting days in a week and traverse through the collection, examining one item at a time.Code section 3.18: A foreach loop.\n\n\n1 String[] days = {\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"};\n2 \n3 for (String day : days) {\n4   System.out.println(day);\n5 }\n\n\n\n\n\n\n\n\n\nOutput for code listing 3.18\n\nMonday\nTuesday\nWednesday\nThursday\nFriday\nSaturday\nSundayNotice that the loop automatically exits after the last item in the collection has been examined in the statement block.Although the enhanced for loop can make code much clearer, it can't be used in some common situations.Only access. Elements can not be assigned to, eg, not to increment each element in a collection.\nOnly single structure. It's not possible to traverse two structures at once, eg, to compare two arrays.\nOnly single element. Use only for single element access, eg, not to compare successive elements.\nOnly forward. It's possible to iterate only forward by single steps.\nAt least Java 5. Don't use it if you need compatibility with versions before Java 5."
}