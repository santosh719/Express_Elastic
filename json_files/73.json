{
  "title": "Break and continue keywords[edit]",
  "content": "The break keyword exits a flow control loop, such as a for loop. It basically breaks the loop.In the code section 3.34, the loop would print out all the numbers from 1 to 10, but we have a check for when i equals 5. When the loop reaches its fifth iteration, it will be cut short by the break statement, at which point it will exit the loop.Code section 3.34: An interrupted for loop.\n\n\n1 for (int i = 1; i <= 10; i++) {\n2     System.out.println(i);\n3     if (i == 5) {\n4        System.out.println(\"STOP!\");\n5        break;\n6     }\n7 }\n\n\n\n\n\n\n\n\n\nOutput for code section 3.34\n\n1\n2\n3\n4\n5\nSTOP!The continue keyword jumps straight to the next iteration of a loop and evaluates the boolean expression controlling the loop. The code section 3.35 is an example of the continue statement in action:Code section 3.35: A for loop with a skipped iteration.\n\n\n1 for (int i = 1; i <= 10; i++) {\n2     if (i == 5) {\n3         System.out.println(\"Caught i == 5\");\n4         continue;\n5     }\n6     System.out.println(i);\n7 }\n\n\n\n\n\n\n\n\n\nOutput for code section 3.35\n\n1\n2\n3\n4\nCaught i == 5\n6\n7\n8\n9\n10As the break and continue statements reduce the readability of the code, it is recommended to reduce their use or replace them with the use of if and while blocks. Some IDE refactoring operations will fail because of such statements.Test your knowledge\n\nQuestion 3.2: Consider the following code:\n\n\n\nQuestion 3.2: Loops and conditions.\n\n\n 1 int numberOfItems = 5;\n 2 int currentItems = 0;\n 3 int currentCandidate = 1;\n 4 \n 5 while (currentItems < numberOfItems) {\n 6   currentCandidate = currentCandidate + 1;\n 7   System.out.println(\"Test with integer: \" + currentCandidate);\n 8  \n 9   boolean found = true;\n10   for (int i = currentCandidate - 1; i > 1; i--) {\n11    \n12     // Test if i is a divisor of currentCandidate\n13     if ((currentCandidate % i) == 0) {\n14       System.out.println(\"Not matching...\");\n15       found = false;\n16       break;\n17     }\n18    \n19   }\n20  \n21   if (found) {\n22     System.out.println(\"Matching!\");\n23     currentItems = currentItems + 1;\n24   }\n25 }\n26 \n27 System.out.println(\"Find the value: \" + currentCandidate);\n\n\n\n\nWhat will be printed in the standard output?\n\nAnswer\n\n\n\n\nOutput for Question 3.2\n\nTest with integer: 2\nMatching!\nTest with integer: 3\nMatching!\nTest with integer: 4\nNot matching...\nTest with integer: 5\nMatching!\nTest with integer: 6\nNot matching...\nTest with integer: 7\nMatching!\nTest with integer: 8\nNot matching...\nTest with integer: 9\nNot matching...\nTest with integer: 10\nNot matching...\nTest with integer: 11\nMatching!\nFind the value: 11\n\n\n\nThe snippet is searching the 5th prime number, that is to say: 11. It iterates on each positive integer from 2 (2, 3, 4, 5, 6, 7, 8, 9, 10, 11...), among them, it counts the prime numbers (2, 3, 5, 7, 11) and it stops at the 5th one.\nSo the snippet first iterates on each positive integer from 2 using the while loop:\n\n\n\nAnswer 3.2.1: while loop.\n\n\n 1 int numberOfItems = 5;\n 2 int currentItems = 0;\n 3 int currentCandidate = 1;\n 4 \n 5 while (currentItems < numberOfItems) {\n 6   currentCandidate = currentCandidate + 1;\n 7   System.out.println(\"Test with integer: \" + currentCandidate);\n 8  \n 9   boolean found = true;\n10   for (int i = currentCandidate - 1; i > 1; i--) {\n11    \n12     // Test if i is a divisor of currentCandidate\n13     if ((currentCandidate % i) == 0) {\n14       System.out.println(\"Not matching...\");\n15       found = false;\n16       break;\n17     }\n18    \n19   }\n20  \n21   if (found) {\n22     System.out.println(\"Matching!\");\n23     currentItems = currentItems + 1;\n24   }\n25 }\n26 \n27 System.out.println(\"Find the value: \" + currentCandidate);\n\n\n\n\nFor each iteration, the current number is either a prime number or not. If it is a prime number, the code at the left will be executed. If it is not a prime number, the code at the right will be executed.\n\n\n\n\n\n\nAnswer 3.2.2: A prime number.\n\n\n 1 int numberOfItems = 5;\n 2 int currentItems = 0;\n 3 int currentCandidate = 1;\n 4 \n 5 while (currentItems < numberOfItems) {\n 6   currentCandidate = currentCandidate + 1;\n 7   System.out.println(\"Test with integer: \" + currentCandidate);\n 8  \n 9   boolean found = true;\n10   for (int i = currentCandidate - 1; i > 1; i--) {\n11    \n12     // Test if i is a divisor of currentCandidate\n13     if ((currentCandidate % i) == 0) {\n14       System.out.println(\"Not matching...\");\n15       found = false;\n16       break;\n17     }\n18    \n19   }\n20  \n21   if (found) {\n22     System.out.println(\"Matching!\");\n23     currentItems = currentItems + 1;\n24   }\n25 }\n26 \n27 System.out.println(\"Find the value: \" + currentCandidate);\n\n\n\n\n\n\n\n\n\nAnswer 3.2.3: Not a prime number.\n\n\n 1 int numberOfItems = 5;\n 2 int currentItems = 0;\n 3 int currentCandidate = 1;\n 4 \n 5 while (currentItems < numberOfItems) {\n 6   currentCandidate = currentCandidate + 1;\n 7   System.out.println(\"Test with integer: \" + currentCandidate);\n 8  \n 9   boolean found = true;\n10   for (int i = currentCandidate - 1; i > 1; i--) {\n11    \n12     // Test if i is a divisor of currentCandidate\n13     if ((currentCandidate % i) == 0) {\n14       System.out.println(\"Not matching...\");\n15       found = false;\n16       break;\n17     }\n18    \n19   }\n20  \n21   if (found) {\n22     System.out.println(\"Matching!\");\n23     currentItems = currentItems + 1;\n24   }\n25 }\n26 \n27 System.out.println(\"Find the value: \" + currentCandidate);\n\n\n\n\n\n\n\nThe prime numbers are counted using currentItems. When currentItems is equal to numberOfItems (5), the program go out of the while loop. currentCandidate contains the last number, that is to say the 5th prime number:\n\n\n\nAnswer 3.2.4: End of the program.\n\n\n 1 int numberOfItems = 5;\n 2 int currentItems = 0;\n 3 int currentCandidate = 1;\n 4 \n 5 while (currentItems < numberOfItems) {\n 6   currentCandidate = currentCandidate + 1;\n 7   System.out.println(\"Test with integer: \" + currentCandidate);\n 8  \n 9   boolean found = true;\n10   for (int i = currentCandidate - 1; i > 1; i--) {\n11    \n12     // Test if i is a divisor of currentCandidate\n13     if ((currentCandidate % i) == 0) {\n14       System.out.println(\"Not matching...\");\n15       found = false;\n16       break;\n17     }\n18    \n19   }\n20  \n21   if (found) {\n22     System.out.println(\"Matching!\");\n23     currentItems = currentItems + 1;\n24   }\n25 }\n26 \n27 System.out.println(\"Find the value: \" + currentCandidate);"
}