{
  "title": "Exception object[edit]",
  "content": "The preceding exception could have been created explicitly by the developer as it is the case in the following code:Code listing 6.2: SimpleDivisionOperation.java\n\n\n 1 public class SimpleDivisionOperation {\n 2   public static void main(String[] args) {\n 3     System.out.println(divide(4, 2));\n 4     if (args.length > 1) {\n 5       // Convert a string to an integer\n 6       int arg0 = Integer.parseInt(args[0]);\n 7       int arg1 = Integer.parseInt(args[1]);\n 8       System.out.println(divide(arg0, arg1));\n 9     }\n10   }\n11 \n12   public static int divide(int a, int b) {\n13     if (b == 0) {\n14       throw new ArithmeticException(\"You can\\'t divide by zero!\");       \n15     } else {\n16       return a / b;\n17     }\n18   }\n19 }\n\n\n\n\n\n\n\n\n\nOutput for Code listing 6.2\n\n$ java SimpleDivisionOperation 1 0\n2\nException in thread \"main\" java.lang.ArithmeticException: You can't divide by zero!\nat SimpleDivisionOperation.divide(SimpleDivisionOperation.java:14)\nat SimpleDivisionOperation.main(SimpleDivisionOperation.java:7)Note that when b equals zero, there is no return value. Instead of a java.lang.ArithmeticException generated by the Java interpreter itself, it is an exception created by the coder. The result is the same. It shows you that an exception is an object. Its main particularity is that it can be thrown. An exception object must inherit from java.lang.Exception. Standard exceptions have two constructors:The default constructor; and,\nA constructor taking a string argument so that you can place pertinent information in the exception.Code section 6.1: Instance of an exception object with the default constructor.\n\n\n1 new Exception();Code section 6.2: Instance of an Exception object by passing string in constructor.\n\n\n1 new Exception(\"Something unexpected happened\");This string can later be extracted using various methods, as you can see in the code listing 6.2.You can throw any type of Throwable object using the keyword throw. It interrupts the method. Anything after the throw statement would not be executed, unless the thrown exception is handled. The exception object is not returned from the method, it is thrown from the method. That means that the exception object is not the return value of the method and the calling method can be interrupted too and so on and so on...Typically, you'll throw a different class of exception for each different type of error. The information about the error is represented both inside the exception object and implicitly in the name of the exception class, so someone in the bigger context can figure out what to do with your exception. Often, the only information is the type of exception, and nothing meaningful is stored within the exception object.Oracle standard exception classes[edit]The box 6.1 below talks about the various exception classes within the java.lang package.Box 6.1: The Java exception classes\n\nThrowable\nThe Throwable class is the superclass of all errors and exceptions in the Java language. Only objects that are instances of this class (or one of its subclasses) are thrown by the Java Virtual Machine or can be thrown by the Java throw statement.\nA throwable contains a snapshot of the execution stack of its thread at the time it was created. It can also contain a message string that gives more information about the error. Finally, it can contain a cause: another throwable that caused this throwable to get thrown. The cause facility was added in release 1.4. It is also known as the chained exception facility, as the cause can, itself, have a cause, and so on, leading to a \"chain\" of exceptions, each caused by another.\nError\nAn Error indicates serious problems that a reasonable application should not try to handle. Most such errors are abnormal conditions.\nException\nThe class Exception and its subclasses are a form of Throwable that indicates conditions that a reasonable application might want to handle. Also this is the class that a programmer may want to extend when adding business logic exceptions.\nRuntimeException\nRuntimeException is the superclass of those exceptions that can be thrown during the normal operation of the Java Virtual Machine. A method is not required to declare in its throws clause any subclasses of RuntimeException that might be thrown during the execution of the method but not caught.\n\n\nFigure 6.2: The exception classes and their inheritance model in the JCL."
}