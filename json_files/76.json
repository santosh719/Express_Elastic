{
  "title": "Examples[edit]",
  "content": "The code listing 3.7 recieves a number as parameter and print its binary representation.Code listing 3.7: GetBinary.java\n\n\n 1 public class GetBinary {\n 2     public static void main(String[] args) {\n 3         if (args.length == 0) {\n 4             // Print usage\n 5             System.out.println(\"Usage: java GetBinary <decimal integer>\");\n 6             System.exit(0);\n 7         } else {\n 8             // Print arguments\n 9             System.out.println(\"Received \" + args.length + \" arguments.\");\n10             System.out.println(\"The arguments are:\");\n11             for (String arg : args) {\n12                 System.out.println(\"\\t\" + arg);\n13             }\n14         }\n15 \n16         int number = 0;\n17         String binary = \"\";\n18 \n19         // Get the input number\n20         try {\n21             number = Integer.parseInt(args[0]);\n22         } catch (NumberFormatException ex) {\n23             System.out.println(\"Error: argument must be a base-10 integer.\");\n24             System.exit(0);\n25         }\n26 \n27         // Convert to a binary string\n28         do {\n29             switch (number % 2) {\n30                 case 0: binary = '0' + binary; break;\n31                 case 1: binary = '1' + binary; break;\n32             }\n33             number >>= 1;\n34         } while (number > 0);\n35 \n36         System.out.println(\"The binary representation of \" + args[0] + \" is \" + binary);\n37     }\n38 }The code listing 3.8 is a simulation of playing a game called Lucky Sevens. It is a dice game where the player rolls two dice. If the numbers on the dice add up to seven, he wins $4. If they do not, he loses $1. The game shows how to use control flow in a program as well as the fruitlessness of gambling.Code listing 3.8: LuckySevens.java\n\n\n 1 import java.util.*;\n 2 \n 3 public class LuckySevens {\n 4     public static void main(String[] args) {\n 5         Scanner in = new Scanner(System.in);\n 6         Random random = new Random();\n 7         String input;\n 8         int startingCash, cash, maxCash, rolls, roll;\n 9 \n10         // Loop until \"quit\" is input\n11         while (true) {\n12             System.out.print(\"Enter the amount of cash to start with (or \\\"quit\\\" to quit): \");\n13 \n14             input = in.nextLine();\n15 \n16             // Check if user wants to exit\n17             if (input.toLowerCase().equals(\"quit\")) {\n18                 System.out.println(\"\\tGoodbye.\");\n19                 System.exit(0);\n20             }\n21 \n22             // Get number\n23             try {\n24                 startingCash = Integer.parseInt(input);\n25             } catch (NumberFormatException ex) {\n26                 System.out.println(\"\\tPlease enter a positive integer greater than 0.\");\n27                 continue;\n28             }\n29 \n30             // You have to start with some money!\n31             if (startingCash <= 0) {\n32                 System.out.println(\"\\tPlease enter a positive integer greater than 0.\");\n33                 continue;\n34             }\n35 \n36             cash = startingCash;\n37             maxCash = cash;\n38             rolls = 0;\n39             roll = 0;\n40 \n41             // Here is the game loop\n42             for (; cash > 0; rolls++) {\n43                roll = random.nextInt(6) + 1;\n44                roll += random.nextInt(6) + 1;\n45 \n46                 if (roll == 7)\n47                     cash += 4;\n48                 else\n49                     cash -= 1;\n50 \n51                 if (cash > maxCash)\n52                     maxCash = cash;\n53             }\n54 \n55             System.out.println(\"\\tYou start with $\" + startingCash + \".\\n\"\n56                     + \"\\tYou peak at $\" + maxCash + \".\\n\"\n57       + \"\\tAfter \" + rolls + \" rolls, you run out of cash.\");\n58         }\n59     }\n60 }"
}