{
  "title": "public[edit]",
  "content": "public is a Java keyword which declares a member's access as public. Public members are visible to all other classes. This means that any other class can access a public field or method. Further, other classes can modify public fields unless the field is declared as final.A best practice is to give fields private access and reserve public access to only the set of methods and final fields that define the class' public constants. This helps with encapsulation and information hiding, since it allows you to change the implementation of a class without affecting the consumers who use only the public API of the class.Below is an example of an immutable public class named Length which maintains private instance fields named units and magnitude but provides a public constructor and two public accessor methods.Code listing: Length.java\n\n\n 1 package org.wikibooks.java;\n 2 \n 3 public class Length {\n 4    private double magnitude;\n 5    private String units;\n 6 \n 7    public Length(double magnitude, String units) {\n 8       if ((units == null) || (units.trim().length() == 0)) {\n 9           throw new IllegalArgumentException(\"non-null, non-empty units required.\");\n10       }\n11 \n12       this.magnitude = magnitude;\n13       this.units = units;\n14    }\n15 \n16    public double getMagnitude() {\n17       return magnitude;\n18    }\n19 \n20    public String getUnits() {\n21       return units;\n22    }\n23 }"
}