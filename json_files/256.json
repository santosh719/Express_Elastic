{
  "title": "Generics[edit]",
  "content": "Objects put into a collection are upcasted to the Object class. This means that you need to cast the object reference back when you get an element out of the collection. It also means that you need to know the type of the object when you take it out. If a collection contains different types of objects, we will have difficulty finding out the type of the objects obtained from a collection at run time. For example. let's use this collection with two objects in it:Code section 5.1: Collection feeding.\n\n\n1 Collection ageList = new ArrayList();\n2 ageList.add(new Integer(46));\n3 ageList.add(\"50\");Code section 5.2: Collection reading.\n\n\n1 Integer sum = new Integer(0);\n2 for (Object age : ageList) {\n3     sum = sum.add((Integer) age);\n4 }\n5 \n6 if (!ageList.isEmpty()) {\n7     System.out.println(\"The average age is \" + sum / ageList.size());\n8 }\n\n\n\n\n\n\n\n\n\nConsole for Code section 5.2\n\nClassCastException.This error could have been found earlier, at compile time, by using generic types. The Generics have been added since JDK version 1.5. It is an enhancement to the type system of the Java language. All collection implementations since 1.5 now have a parameterized type <E>. The E refers to an Element type. When a collection is created, the actual Element type will replace the E. In the collection, the objects are now upcasted to E class.Code section 5.3: Collection with generics.\n\n\n1 Collection<Integer> ageList = new ArrayList<Integer>();\n2 ageList.add(new Integer(46));     // Integer can be added\n3 ageList.add(\"50\");                // Compilation error, ageList can have only Integers insideageList is a collection that can contain only Integer objects as elements. No casting is required when we take out an element.Code section 5.4: Item reading.\n\n\n1 Integer age = ageList.get(0);Generics are not mandatory but are is often used with the collection classes."
}