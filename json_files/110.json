{
  "title": "Immutability[edit]",
  "content": "Strings are immutable; that is, they cannot be modified once created. Whenever it looks as if a String object was modified actually a new String object was created. For instance, the String.trim() method returns the string with leading and trailing whitespace removed. Actually, it creates a new trimmed string and then returns it. Pay attention on what happens in Code section 3.82:Code section 3.82: Immutability.\n\n\n1 String badlyCutText = \"     Java is great.     \";\n2 System.out.println(badlyCutText);\n3 \n4 badlyCutText.trim();\n5 System.out.println(badlyCutText);\n\n\n\n\n\n\n\n\n\nOutput for Code section 3.82\n\n     Java is great.    \n     Java is great.The trim() method call does not modify the object so nothing happens. It creates a new trimmed string and then throws it away.Code section 3.83: Assignment.\n\n\n1 String badlyCutText = \"     Java is great.     \";\n2 System.out.println(badlyCutText);\n3 \n4 badlyCutText = badlyCutText.trim();\n5 System.out.println(badlyCutText);\n\n\n\n\n\n\n\n\n\nOutput for Code section 3.83\n\n     Java is great.    \nJava is great.The returned string is assigned to the variable. It does the job as the trim() method has created a new String instance."
}