{
  "title": "String cases[edit]",
  "content": "The String class also allows for the modification of cases. The two methods that make this possible are toLowerCase() and toUpperCase().Code section 3.96: Case modification.\n\n\n1 String str = \"wIkIbOoKs\";\n2 System.out.println(str.toLowerCase());\n3 System.out.println(str.toUpperCase());\n\n\n\n\n\n\n\n\n\n\nOutput for Code section 3.96\n\nwikibooks\nWIKIBOOKSThese methods are useful to do a search which is not case sensitive:Code section 3.97: Text search.\n\n\n 1 String word = \"Integer\";\n 2 String text = \"A number without a decimal part is an integer.\"\n 3   + \" Integers are a list of digits.\";\n 4 \n 5 ...\n 6 \n 7 // Remove the case\n 8 String lowerCaseWord = word.toLowerCase();\n 9 String lowerCaseText = text.toLowerCase();\n10 \n11 // Search\n12 int index = lowerCaseText.indexOf(lowerCaseWord);\n13 while (index != -1) {\n14   System.out.println(word\n15     + \" appears at column \"\n16     + (index + 1)\n17     + \".\");\n18   index = lowerCaseText.indexOf(lowerCaseWord, index + 1);\n19 }\n\n\n\n\n\n\n\n\n\nOutput for Code section 3.97\n\nInteger appears at column 38.\nInteger appears at column 47.Test your knowledge\n\nQuestion 3.12: You have mail addresses in the following form: <firstName>.<lastName>@<companyName>.org\nWrite the String getDisplayName(String) method that receives the mail string as parameter and returns the readable person name like this: LASTNAME Firstname\n\nAnswer\n\n\n\n\nAnswer 3.12: getDisplayName()\n\n\n 1 public static String getDisplayName(String mail) {\n 2   String displayName = null;\n 3  \n 4   if (mail != null) {\n 5     String[] mailParts = mail.split(\"@\");\n 6     String namePart = mailParts[0];\n 7     String[] namesParts = namePart.split(\"\\\\.\");\n 8    \n 9     // The last name\n10     String lastName = namesParts[1];\n11     lastName = lastName.toUpperCase();\n12    \n13     // The first name\n14     String firstName = namesParts[0];\n15    \n16     String firstNameInitial = firstName.substring(0, 1);\n17     firstNameInitial = firstNameInitial.toUpperCase();\n18    \n19     String firstNameEnd = firstName.substring(1);\n20     firstNameEnd = firstNameEnd.toLowerCase();\n21    \n22     // Concatenation\n23     StringBuilder displayNameBuilder = new StringBuilder(lastName).append(\" \").append(firstNameInitial).append(firstNameEnd);\n24     displayName = displayNameBuilder.toString();\n25   }\n26  \n27   return displayName;\n28 }\n\n\n\n\n\nWe only process non null strings,\nWe first split the mail into two parts to separate the personal information from the company information and we keep the name data,\nThen we split the name information to separate the first name from the last name. As the split() method use regular expression and . is a wildcard character, we have to escape it (\\.). However, in a string, the \\ is also a special character, so we need to escape it too (\\\\.),\nThe last name is just capitalized,\nAs the case of all the first name characters will not be the same, we have to cut the first name. Only the first name initial will be capitalized,\nNow we can concatenate all the fragments. We prefer to use a StringBuilder to do that."
}