{
  "title": "Note for C++ programmers[edit]",
  "content": "Java Generics are similar to C++ Templates in that both were added for the same reason. The syntax of Java Generic and C++ Template are also similar. There are some differences however. The C++ template can be seen as a kind of macro, in that a new copy of the code is generated for each generic type referenced. All extra code for templates is generated at compiler time. In contrast, Java Generics are built into the language. The same code is used for each generic type. For example:Code section 4.50: Java generics.\n\n\n1 Collection<String>  collString  = new ArrayList<String>();\n2 Collection<Integer> collInteger = new ArrayList<Integer>();Both these objects appear as the same type at runtime (both ArrayList's). The generic type information is erased during compilation (type erasure). For example:Code section 4.51: Type erasure.\n\n\n1 public <T> void method(T argument) {\n2   T variable;\n3   \n4 }is transformed by erasure into:Code section 4.52: Transformation.\n\n\n1 public void method(Object argument) {\n2   Object variable;\n3   \n4 }Test your knowledge\n\nQuestion 4.9: Consider the following class.\n\n\n\nQuestion 4.9: Question9.java\n\n\n 1 import java.util.ArrayList;\n 2 import java.util.Collection;\n 3 \n 4 public class Question9 {\n 5   public static void main(String[] args) {\n 6     Collection<String> collection1 = new ArrayList<String>();\n 7     Collection<? extends Object> collection2 = new ArrayList<String>();\n 8     Collection<? extends String> collection3 = new ArrayList<String>();\n 9     Collection<? extends String> collection4 = new ArrayList<Object>();\n10     Collection<? super Object> collection5 = new ArrayList<String>();\n11     Collection<? super Object> collection6 = new ArrayList<Object>();\n12     Collection<?> collection7 = new ArrayList<String>();\n13     Collection<? extends Object> collection8 = new ArrayList<?>();\n14     Collection<? extends Object> collection9 = new ArrayList<Object>();\n15     Collection<? extends Integer> collection10 = new ArrayList<String>();\n16     Collection<String> collection11 = new ArrayList<? extends String>();\n17     Collection collection12 = new ArrayList<String>();\n18   }\n19 }\n\n\n\n\nWhich lines will generate a compile error?\n\nAnswer\n\n\n\n\nAnswer 4.9: Answer9.java\n\n\n 1 import java.util.ArrayList;\n 2 import java.util.Collection;\n 3 \n 4 public class Answer9 {\n 5   public static void main(String[] args) {\n 6     Collection<String> collection1 = new ArrayList<String>();\n 7     Collection<? extends Object> collection2 = new ArrayList<String>();\n 8     Collection<? extends String> collection3 = new ArrayList<String>();\n 9     Collection<? extends String> collection4 = new ArrayList<Object>();\n10     Collection<? super Object> collection5 = new ArrayList<String>();\n11     Collection<? super Object> collection6 = new ArrayList<Object>();\n12     Collection<?> collection7 = new ArrayList<String>();\n13     Collection<? extends Object> collection8 = new ArrayList<?>();\n14     Collection<? extends Object> collection9 = new ArrayList<Object>();\n15     Collection<? extends Integer> collection10 = new ArrayList<String>();\n16     Collection<String> collection11 = new ArrayList<? extends String>();\n17     Collection collection12 = new ArrayList<String>();\n18   }\n19 }\n\n\n\n\n\nLine 9: Object does not extend String.\nLine 10: String is not a superclass of Object.\nLine 13: ArrayList<?> can't be instantiated.\nLine 15: Integer does not extend String.\nLine 16: ArrayList<? extends String> can't be instantiated."
}