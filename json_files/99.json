{
  "title": "Numeric Literals[edit]",
  "content": "There are three types of numeric literals in Java.Integer Literals[edit]In Java, you may enter integer numbers in several formats:As decimal numbers such as 1995, 51966. Negative decimal numbers such as -42 are actually expressions consisting of the integer literal with the unary negation operation -.\nAs octal numbers, using a leading 0 (zero) digit and one or more additional octal digits (digits between 0 and 7), such as 077. Octal numbers may evaluate to negative numbers; for example 037777777770 is actually the decimal value -8.\nAs hexadecimal numbers, using the form 0x (or 0X) followed by one or more hexadecimal digits (digits from 0 to 9, a to f or A to F). For example, 0xCAFEBABEL is the long integer 3405691582. Like octal numbers, hexadecimal literals may represent negative numbers.\nStarting in J2SE 7.0, as binary numbers, using the form 0b (or 0B) followed by one or more binary digits (0 or 1). For example, 0b101010 is the integer 42. Like octal and hex numbers, binary literals may represent negative numbers.By default, the integer literal primitive type is int. If you want a long, add a letter el suffix (either the character l or the character L) to the integer literal. This suffix denotes a long integer rather than a standard integer. For example, 3405691582L is a long integer literal. Long integers are 8 bytes in length as opposed to the standard 4 bytes for int. It is best practice to use the suffix L instead of l to avoid confusion with the digit 1 (one) which looks like l in many fonts: 200l  2001. If you want a short integer literal, you have to cast it.Starting in J2SE 7.0, you may insert underscores between digits in a numeric literal. They are ignored but may help readability by allowing the programmer to group digits.Floating Point Literals[edit]Floating point numbers are expressed as decimal fractions or as exponential notation:Code section 3.63: Floating point literals.\n\n\n1 double decimalNumber = 5.0;\n2 decimalNumber = 5d;\n3 decimalNumber = 0.5;\n4 decimalNumber = 10f;\n5 decimalNumber = 3.14159e0;\n6 decimalNumber = 2.718281828459045D;\n7 decimalNumber = 1.0e-6D;Floating point numbers consist of:an optional leading + or - sign, indicating a positive or negative value; if omitted, the value is positive,\none of the following number formats\n\ninteger digits (must be followed by either an exponent or a suffix or both, to distinguish it from an integer literal)\ninteger digits .\ninteger digits . integer digits\n. integer digits\n\n\nan optional exponent of the form\n\nthe exponent indicator e or E\nan optional exponent sign + or - (the default being a positive exponent)\ninteger digits representing the integer exponent value\n\n\nan optional floating point suffix:\n\neither f or F indicating a single precision (4 bytes) floating point number, or\nd or D indicating the number is a double precision floating point number (by default, thus the double precision (8 bytes) is default).Here, integer digits represents one or more of the digits 0 through 9.Starting in J2SE 7.0, you may insert underscores between digits in a numeric literal. They are ignored but may help readability by allowing the programmer to group digits.Character Literals[edit]Character literals are constant valued character expressions embedded in a Java program. Java characters are sixteen bit Unicode characters, ranging from 0 to 65535. Character literals are expressed in Java as a single quote, the character, and a closing single quote ('a', '7', '$', ''). Character literals have the type char, an unsigned integer primitive type. Character literals may be safely promoted to larger integer types such as int and long. Character literals used where a short or byte is called for must be cast to short or byte since truncation may occur."
}