{
  "title": "Socket Connection Example[edit]",
  "content": "Figure 1:Simple Client Server ImplementationThis page shows an example of a socket connection.Create a Server[edit]The Java language was developed having network computing in mind. For this reason it is very easy to create a server program. A server is a piece of code that runs all the time listening on a particular port on the computer for incoming requests. When a request arrives, it starts a new thread to service the request. See the following example:Listening on a port[edit]ComServer\nclass is for listening on a port for a client.Code listing 1.1: ComServer\n\n\nimport java.net.ServerSocket;\n/**\n * -- Main Server Class; Listening on a port for client; If there is a client,\n * starts a new Thread and goes back to listening for further clients. --\n */\npublic class ComServer \n{\nstatic boolean  GL_listening = true;\n   /**\n    * -- Main program to start the Server --\n    */\n   public static void main(String[] args) throws IOException\n   {\n      ComServer srv = new ComServer();\n      srv.listen(); \n   } // --- End of Main Method ---\n\n   /**\n    * -- Server method; Listen for client --\n    */\n   public int listen() throws IOException\n   {\n    ServerSocket serverSocket = null;\n    int iPortNumber = 9090;\n\n       // --- Open the Server Socket where this should listen ---\n       try {\n           System.out.println( \"*** Open the listening socket; at:\"+ iPortNumber + \" ***\" );\n           serverSocket = new ServerSocket( iPortNumber );\n       } catch (IOException e) {\n           System.err.println(\"Could not listen on port:\"+iPortNumber );\n           System.exit(1);\n       }\n       while ( GL_listening )\n       {\n        ComServerThread clientServ; \n           // --- Listening for client; If there is a client start a Thread -\n           System.out.println( \"*** Listen for a Client; at:\"+ iPortNumber + \" ***\" );\n           clientServ = new ComServerThread( serverSocket.accept() );\n           // --- Service a Client ---\n           System.out.println( \"*** A Client came; Service it ***\" );\n           clientServ.start();   /* --- Use for multy Threaded --- */\n      //     clientServ.run();    /* --- Use for Single Threaded --- */\n       }\n\n       // --- Close the Server socket;  Server exiting ---\n       serverSocket.close();\n    return 0;\n   } // --- End of listen Method --- \n}  // --- End of ComServer Class ---ServerSocket( iPortNumber )\nCreates a server socket, bound to the specified port.\nserverSocket.accept()\nListens for a connection to be made to this socket and accepts it. The method blocks until a connection is made. It returns a new Socket.Service One Client[edit]ComServerThread\nThis class extended from a Thread is responsible to service one client. The Socket connection will be open between the client and server. A simple protocol has to be defined between the client and server, the server has to understand what the client wants from the server. The client will send a terminate command, for which the server will terminate the socket connection. The ComServerThread class is responsible to handle all client requests, until the client sends a terminate command.Code listing 1.2: ComServerThread\n\n\n /**\n  * -- A class extended from a Thread; Responsible to service one client --\n  */\n class '''ComServerThread''' extends Thread\n {\n    private Socket clientSocket = null;\n    COM_DATA tDataFromClient;\n    COM_DATA tDataToClient; \n    ObjectInputStream oIn;\n    ObjectOutputStream oOut;\n    /**\n     * -- Constructor --\n     */\n    public ComServerThread( Socket socket )\n    {\n       super( \"ComServerThread\" );\n       this.clientSocket = socket;\n    } // -- End of ComServerThread() constructor --\n    /**\n     * -- Overrun from the Thread (super) class --\n     */\n    public void run()\n    {\n       try {\n          // --- Create the Writer; will be used to send data to client ---\n          oOut = new ObjectOutputStream( clientSocket.getOutputStream() );\n          // --- Create the Reader; will be used to get data from client ---\n          oIn  = new ObjectInputStream( clientSocket.getInputStream() );\n          // --- Create a new protocol object ---\n          ComProtocol comp = new ComProtocol();\n          // --- Send something to client to indicate that server is ready ---\n          tDataToClient  = '''comp.processInput( null );'''\n          '''sendDataToClient'''( tDataToClient, oOut );\n          // --- Get the data from the client ---\n          while ( true )\n          {\n             try {\n                tDataFromClient = '''getDataFromClient( oIn )''';\n                // --- Parse the request and get the reply ---\n                tDataToClient = '''comp.processInput( tDataFromClient );'''\n                // --- Send data to the Client ---\n                '''sendDataToClient'''( tDataToClient, oOut );\n             }\n             catch ( EOFException e ) {\n                System.out.println( \"Client Disconnected, Bye, Bye\" );\n                break;\n             }\n             // --- See if the Client wanted to terminate the connection ---\n             if ( tDataToClient.bExit )\n             {\n                System.out.println( \"Client said Bye. Bye\" );\n                break;\n             }\n          }\n          // --- Close resources;  This client is gone ---\n          comp.Final();\n          oOut.close();\n          oIn.close();\n          clientSocket.close();\n       } catch ( IOException e ) {\n        e.printStackTrace();\n       }\n    } // -- End of run() Method --\n    /**\n     * Get data from Client \n     */\n    private static COM_DATA '''getDataFromClient'''( ObjectInputStream oIn ) throws IOException                                                                         \n    {\n        COM_DATA  tDataFromClient = null;         \n        // --- Initialize variables ---\n        //   tDataFromClient = new COM_DATA();\n        while ( tDataFromClient == null )\n        {\n           try {\n              // --- Read Line Number first --\n              tDataFromClient = (COM_DATA) oIn.readObject();\n           } catch ( ClassNotFoundException e ) {\n               System.out.println( \"ClassNotFound\" );\n           }\n        }\n        System.out.println( \"Get: \" + tDataFromClient.comData );\n     return tDataFromClient;\n    } // --- getDataFromClient() Method --- \n    /**\n     * Send data to Client \n     */\n    private static void '''sendDataToClient'''( COM_DATA tDataToClient,\n                                           ObjectOutputStream  oOut ) throws IOException\n    {         \n        System.out.println( \"Sent: \" + tDataToClient.comData );\n        oOut.writeObject( tDataToClient );\n      return;\n    } // -- End of sendDataToClient() Method --\n } // --- End of ComServerThread class ---COM_DATA tDataFromClient\nThis variable will contain the data object from the client.\nCOM_DATA tDataToClient\nThis variable will contain the data object to be sent to the client.\nsendDataToClient\nThis method sends the data object to the client.\ngetDataFromClient\nThis method gets the data object from the client.\nprocessInput( tDataFromClient )\nThis method of the class ComProtocol interprets the client commands and returns the data object that will be sent back to the client.Handling the request; implements the communication protocol[edit]ComProtocol\nThis class implements, and encapsulates the communication logic (protocol). The protocol is the following:\n\nThe client initiate the connection.\nThe server accepts it and sends an acknowledgment notifying that it's ready\nThe client sends a request\nThe server response based on the request\n\n\n...\n\nThe client sends a BYE request\nThe server acknowledge the BYE request and disconnects the socket connection\nThe client gets the acknowledgment to the BYE\n\n\n...\n\nThe client sends a SHUTDOWN request\nThe server acknowledge the SHUTDOWN request and disconnects and also stops listening of other clients.\nThe client gets the acknowledgment to the SHUTDOWNCode listing 1.3: ComProtocol\n\n\n class '''ComProtocol'''\n {\n  private static final int COM_STATUS_WAITING    = 0; \n  private static final int COM_STATUS_READY_SENT = 1;\n  private static final int COM_STATUS_DATA_SENT  = 2;\n  private static final int COM_STATUS_WAITING_FOR_TERMINALID = 3;\n  private int state = COM_STATUS_WAITING;\n  \n  // --- Reference to 'BACK-END' module ---  \n  private MqTeAccess mqTe;\n  ...\n    /**\n     * Create a protokol object; CAll MQ INI function\n     */\n    public ComProtocol()\n    {\n     int    iRet = 0;\n        // --- Initialize 'BACK-END' modules  ---\n        mqTe. ...\n ...\n    }\n    /**\n     * --- Process the Input and Create the output to the Client ---\n     */\n    public COM_DATA processInput( COM_DATA theInput )\n    {\n     COM_DATA theOutput;\n        // --- Initialize Variables ---\n        theOutput = new COM_DATA();\n        // --- Check if the Clients want to disconnect ---\n        if ( theInput != null ) \n        {\n            if ( theInput.comData.equals('''\"!BYE.@\"''') )\n            {\n                // --- The Client wants to terminate; Echo data back to client\n                theOutput.comData = \"BYE.\";\n                // --- Mark the comunication to be terminated ---\n                theOutput.bExit = true;\n                // --- Set the internal state to wait for a new client ---\n                state = COM_STATUS_WAITING;\n                // --- Return Data object to be sent to the client ---\n                return theOutput;\n            }\n            if ( theInput.comData.equals('''\"!SHUTDOWN.@\"''') )\n            {\n                // --- The Client wants to terminate; Echo data back to client\n                theOutput.comData = \"BYE.\";\n                // --- Mark the comunication to be terminated ---\n                theOutput.bExit = true;\n                // --- Tell the server to stop listening for new clients ---\n                ComServer.GL_listening = false;\n                // --- Set the internal state to wait for a new client ---\n                state = COM_STATUS_WAITING;\n                // --- Return Data object to be sent to the client ---\n                return theOutput;\n            }\n        }\n        if ( state == COM_STATUS_WAITING )\n        {\n            // --- Send ready Message to the Client ---\n            theOutput.comData = \"Ready:\";\n            // --- Set the internal state ready; and wait for TerminalId ---\n            state = COM_STATUS_WAITING_FOR_TERMINALID;\n        }\n        else if ( state == COM_STATUS_WAITING_FOR_TERMINALID )\n        {\n         int iRet;\n            // --- Get the Terminal ID ---\n            sTermId = theInput.comData; \n            // --- Call 'BACK-END' modules ...  ---\n            mqTe. ...\n ...\n            // --- Send ready Message with the Server Version to the Client ---\n            theOutput.comData = \"Ready;Server Version 1.0:\";\n            // --- Set the internal state raedy; and wait for TerminalId ---\n            state = COM_STATUS_READY_SENT;\n        }\n        else if ( state == COM_STATUS_READY_SENT )\n        {\n         int iRet;\n            String sCommand = theInput.comData;\n            // --- Call 'BACK-END' modules ...\n ...\n            /*\n            ** --- Check if we should get Response data ---\n            */\n            if ( theInput.iRet == COM_DATA.NOWAIT_FOR_RESPONSE ) {\n                // -- Set the Output Value ---\n                theOutput.iRet = iRet;\n                theOutput.comData = \"\";\n            }\n            else {\n                // --- Call 'BACK-END' modules ---\n                mqTe. ...\n                // --- Set the Output Value ---\n                theOutput.comData    = mqTe.sResponseBuffer; \n                theOutput.iRet       = iRet;\n            }\n        }\n     return theOutput;\n    }  // --- End of Method processInput() ---\n } // --- End of ComProtocol Class Definition ---\n\n----The Data object that goes through the network[edit]COM_DATA\nis data structure class that is transmitted through the network. The class contains only data.Code listing 1.4: COM_DATA\n\n\n /**\n  * COM_DATA data structure \n  */\n public class COM_DATA implements Serializable\n {\n  public String  comData;\n  public boolean bExit;\n  public int     iRet;\n    /**\n     * --- Constants values can be passed in in iRet to the Server ---\n     */\n    static final int WAIT_FOR_RESPONSE    = 0;\n    static final int NOWAIT_FOR_RESPONSE  = 1;\n   /**\n    * Initialize the data structure\n    */\n   public COM_DATA()\n   {\n      comData     = \"\";\n      bExit       = false;\n      iRet        = 0;\n   } // -- End of COM_DATA() Constructor --   \n   /**\n    * Copy over it contents \n    */\n   public void copy( COM_DATA tSrc )\n   {\n      this.comData     = tSrc.comData;\n      this.bExit       = tSrc.bExit;\n      this.iRet        = tSrc.iRet;\n    return;\n   } \n } // -- End of COM_DATA class --Create the Client[edit]A client code for a server/service is usually an API that a user application uses to interface to the server. With the help of a client API the user application does not have to know how to connect to the server to get services.ComClient\nThis class is the client API. The application is using this class to communicate with the server.The following is the client class for the above server:Code listing 1.5: ComClient\n\n\n public class ComClient\n {\n  private Socket         comSocket;\n  private ObjectOutputStream oOut;\n  private ObjectInputStream  oIn;\n  private boolean         IsItOpen = false;       \n    /**\n     * --- Open Socket ---\n     */\n    public void openCom( String sServerName,\n                         int    iPortNumber ) throws UnknownHostException,\n                                                              IOException  \n    {\n       try {\n          // --- Open Socket for communication ---\n          comSocket = new Socket( sServerName, iPortNumber );     \n          // --- Get Stream to write request to the Server ---\n          oOut = new ObjectOutputStream( comSocket.getOutputStream() );     \n          // --- Get Stream// to read from the Server\n          oIn = new ObjectInputStream( comSocket.getInputStream());\n          // --- Set internal Member variable that the Communication opened ---\n          IsItOpen = true;\n       } catch ( java.net.UnknownHostException e ) {\n          System.err.println( \"(openCom:)Don't know about host: \"+sServerName );\n          IsItOpen = false;\n          throw( e );                                         \n       } catch ( java.io.IOException e ) {\n          System.err.println(\"(openCom:)Couldn't get I/O for the connection to: \"+ sServerName );\n          IsItOpen = false;\n          throw( e );         \n       }               \n    }\n    /**\n     * --- Check if Socket is open ---\n     */\n    public boolean isItOpen()\n    {\n      return IsItOpen;\n    }     \n    /**\n     * --- Get data string from the Server ---\n     */\n    public void getServerData( COM_DATA tServData ) throws IOException\n    {\n        // --- Initialize Variables ---\n        tServData.comData = \"\";\n        // --- Get the Response from the Server ---              \n        try {\n           tServData.copy( (COM_DATA) oIn.readObject() );\n        }   \n        catch ( ClassNotFoundException e ) {\n            System.out.println( \"Class Not Found\" );\n        } \n        System.out.println( \"Server: \" + tServData.comData );\n        if ( tServData.comData.equals(\"BYE.\") )\n        {\n            tServData.bExit = true;\n        }        \n     return;\n    }\n    /**\n     * --- Send data to the Server ---\n     */\n    public void sendDataToServer( COM_DATA tServData ) throws IOException\n    {\n        // --- Send the data string ---\n        System.out.println( \"Send: \" + tServData.comData );\n        oOut.writeObject( tServData );\n     return;\n    } \n    /**\n     * --- Close Socket --- \n     */\n    public void closeCom() throws IOException\n    {\n        oOut.close();\n        oIn.close();\n        comSocket.close();\n        IsItOpen = false;\n    }    \n }getServerData( COM_DATA tServData )\nThis method reads the data from the server and copies the values to tServData object.\nsendDataToServer( COM_DATA tServData )\nThis method sends the tServData object through the network to the server.\noIn.readObject()\nThis method returns the data object sent by the server.\noOut.writeObject( tServData )\nThis method sends the data object to the server."
}