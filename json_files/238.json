{
  "title": "Access modifiers[edit]",
  "content": "You surely would have noticed by now, the words public, protected and private at the beginning of class's method declarations used in this book. These keywords are called the access modifiers in the Java language syntax, and they define the scope of a given item.For a class[edit]If a class has public visibility, the class can be referenced by anywhere in the program.\nIf a class has package visibility, the class can be referenced only in the package where the class is defined.\nIf a class has private visibility, (it can happen only if the class is defined nested in an other class) the class can be accessed only in the outer class.For a variable[edit]If a variable is defined in a public class and it has public visibility, the variable can be referenced anywhere in the application through the class it is defined in.\nIf a variable has protected visibility, the variable can be referenced only in the sub-classes and in the same package through the class it is defined in.\nIf a variable has package visibility, the variable can be referenced only in the same package through the class it is defined in.\nIf a variable has private visibility, the variable can be accessed only in the class it is defined in.For a method[edit]If a method is defined in a public class and it has public visibility, the method can be called anywhere in the application through the class it is defined in.\nIf a method has protected visibility, the method can be called only in the sub-classes and in the same package through the class it is defined in.\nIf a method has package visibility, the method can be called only in the same package through the class it is defined in.\nIf a method has private visibility, the method can be called only in the class it is defined in.For an interface[edit]The interface methods and interfaces are always public. You do not need to specify the access modifier. It will default to public. For clarity it is considered a good practice to put the public keyword.The same way all member variables defined in the Interface by default will become static final once inherited in a class.Summary[edit]Class\nNested class\nMethod, or Member variable\nInterface\nInterface method signature\n\n\npublic\nvisible from anywhere\nsame as its class\nsame as its class\nvisible from anywhere\nvisible from anywhere\n\n\nprotected\nN/A\nits class and its subclass\nits class and its subclass, and from its package\nN/A\nN/A\n\n\npackage\nonly from its package\nonly from its package\nonly from its package\nN/A\nN/A\n\n\nprivate\nN/A\nonly from its class\nonly from its class\nN/A\nN/AThe cases in bold are the default."
}