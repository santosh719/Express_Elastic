{
  "title": "Return statement[edit]",
  "content": "A return statement exits from a block, so it is often the last statement of a method:Code section 3.9: A return statement.\n\n\n1     public int getAge() {\n2         int age = 24;\n3         return age;\n4     }A return statement can return the content of a variable or nothing. Beware not to write statements after a return statement which would not be executed! Each return statement is ended by a semi-colon (;).Conditional Branching Statements[edit]Conditional branching is attained with the help of the if...else and switch statements. A conditional branch occurs only if a certain condition expression evaluates to true.Conditional Statements[edit]Also referred to as if statements, these allow a program to perform a test and then take action based on the result of that test.The form of the if statement:if (condition) {\n  do statements here if condition is true\n} else {\n  do statements here if condition is false\n}The condition is a boolean expression which can be either true or false. The actions performed will depend on the value of the condition.Example:Code section 3.10: An if statement.\n\n\n1 if (i > 0) {\n2    System.out.println(\"value stored in i is greater than zero\");\n3 } else {\n4    System.out.println(\"value stored is not greater than zero\");\n5 }If statements can also be made more complex using the else if combination:if (condition 1) {\n   do statements here if condition 1 is true\n} else if (condition 2) {\n   do statements here if condition 1 is false and condition 2 is true\n} else {\n  do statements here if neither condition 1 nor condition 2 is true\n}Example:Code section 3.11: An if/else if/else statement.\n\n\n1 if (i > 0) {\n2    System.out.println(\"value stored in i is greater than zero\");\n3 } else if (i < 0) {\n4    System.out.println(\"value stored in i is less than zero\");\n5 } else {\n6    System.out.println(\"value stored is equal to 0\");\n7 }If there is only one statement to be executed after the condition, as in the above example, it is possible to omit the curly braces, however Oracle's Java Code Conventions explicitly state that the braces should always be used.There is no looping involved in an if statement so once the condition has been evaluated the program will continue with the next instruction after the statement.If...else statements[edit]The if ... else statement is used to conditionally execute one of two blocks of statements, depending on the result of a boolean condition.Example:Code section 3.12: An if/else statement.\n\n\n1 if (list == null) {\n2   // This block of statements executes if the condition is true.\n3 } else {\n4   // This block of statements executes if the condition is false.\n5 }Oracle's Java Code Conventions recommend that the braces should always be used.An if statement has two forms:if (boolean-condition)\n   statement1andif (boolean-condition)\n   statement1\nelse\n   statement2Use the second form if you have different statements to execute if the boolean-condition is true or if it is false. Use the first if you only wish to execute statement1 if the condition is true and you do not wish to execute alternate statements if the condition is false.The code section 3.13 calls two int methods, f() and y(), stores the results, then uses an if statement to test if x is less than y and if it is, the statement1 body will swap the values. The end result is x always contains the larger result and y always contains the smaller result.Code section 3.13: Value swap.\n\n\n1 int x = f();\n2 int y = y();\n3 if (x < y) {\n4   int z = x;\n5   x = y;\n6   y = z;\n7 }if...else statements also allow for the use of another statement, else if. This statement is used to provide another if statement to the conditional that can only be executed if the others are not true. For example:Code section 3.14: Multiple branching.\n\n\n1 if (x == 2)\n2   x = 4;\n3 else if (x == 3)\n4   x = 6;\n5 else\n6   x = -1;The else if statement is useful in this case because if one of the conditionals is true, the other must be false. Keep in mind that if one is true, the other will not execute. For example, if the statement at line 2 contained in the first conditional were changed to x = 3;, the second conditional, the else if, would still not execute. However, when dealing with primitive types in conditional statements, it is more desirable to use switch statements rather than multiple else if statements.Switch statements[edit]The switch conditional statement is basically a shorthand version of writing many if...else statements. The syntax for switch statements is as follows:switch(<variable>) {\n  case <result>: <statements>; break;\n  case <result>: <statements>; break;\n  default: <statements>; break;\n}This means that if the variable included equals one of the case results, the statements following that case, until the word break will run. The default case executes if none of the others are true. Note: the only types that can be analysed through switch statements are char, byte, short, or int primitive types. This means that Object variables can not by analyzed through switch statements. However, as of the JDK 7 release, you can use a String object in the expression of a switch statement.Code section 3.15: A switch.\n\n\n 1 int n = 2, x;\n 2 switch (n) {\n 3   case 1: x = 2;\n 4     break;\n 5   case 2: x = 4;\n 6     break;\n 7   case 3: x = 6;\n 8     break;\n 9   case 4: x = 8;\n10     break;\n11 }\n12 return x;In this example, since the integer variable n is equal to 2, case 2 will execute, make x equal to 4. Thus, 4 is returned by the method."
}