{
  "title": "Error handling[edit]",
  "content": "The old way of error handling was to let each function return an error code then let the caller check what was returned. The problem with this method was that if the return code was full of error-checking codes, this got in the way of the original one that was doing the actual work, which in turn did not make it very readable.In the new way of error handling, functions/methods do not return error codes. Instead, when there is an error, an exception is thrown. The exceptions can be handled by the catch keyword at the end of a try block. This way, the code that is calling the function does not need to be mangled with error checking codes, thus making the code more readable. This new way of error handling is called Exception handling.Exception handling was also added to C++. However, there are two differences between Java and C++ Exception handling:In Java, the exception that is thrown is a Java object like any other object in Java. It only has to implement Throwable interface.\nIn Java, the compiler checks whether an exception may be caught or not. The compiler gives an error if there is no catch block for a thrown exception.The optional exception handling in the Java predecessors leads the developers not to care about the error handling. As a consequence, unexpected errors often occur. Java forces the developers to handle exceptions. The programmer must handle exception or declare that the user must handle it. Someone must handle it."
}