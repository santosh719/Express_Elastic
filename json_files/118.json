{
  "title": "Classes, Objects and Types",
  "content": "Navigate Language Fundamentals topic: (vde)\n\n Statements\n Conditional blocks\n Loop blocks\n Boolean expressions\n Variables\n Primitive Types\n Arithmetic expressions\n Literals\n Methods\n String\n Objects\n Packages\n Arrays\n Mathematical functions\n Large numbers\n Random numbers\n Unicode\n Comments\n Keywords\n Coding conventionsAn object is composed of fields and methods. The fields, also called data members, characteristics, attributes, or properties, describe the state of the object. The methods generally describe the actions associated with a particular object. Think of an object as a noun, its fields as adjectives describing that noun, and its methods as the verbs that can be performed by or on that noun.For example, a sports car is an object. Some of its fields might be its height, weight, acceleration, and speed. An object's fields just hold data about that object. Some of the methods of the sports car could be \"drive\", \"park\", \"race\", etc. The methods really don't mean much unless associated with the sports car, and the same goes for the fields.The blueprint that lets us build our sports car object is called a class. A class doesn't tell us how fast our sports car goes, or what color it is, but it does tell us that our sports car will have a field representing speed and color, and that they will be say, a number and a word (or hex color code), respectively. The class also lays out the methods for us, telling the car how to park and drive, but these methods can't take any action with just the blueprint  they need an object to have an effect.In Java, a class is located in a file similar to its own name. If you want to have a class called SportsCar, its source file needs to be SportsCar.java. The class is created by placing the following in the source file:Code listing 3.13: SportsCar.java\n\n\n1 public class SportsCar {\n2    /* Insert your code here */\n3 }The class doesn't do anything yet, as you will need to add methods and field variables first.The objects are different from the primitive types because:The primitive types are not instantiated.\nIn the memory, for a primitive type only its value is stored. For an object, also a reference to an instance can be stored.\nIn the memory, the allocated space of a primitive type is fixed, whatever their value. The allocated space of an object can vary, for instance either the object is instantiated or not.\nThe primitive types don't have methods callable on them.\nA primitive type can't be inherited."
}