{
  "title": "Example 2[edit]",
  "content": "As an example we can write a simple Foo.java source:public class Foo {\n  public static void main(final String[] args) {\n    System.out.println(\"This is a simple example of decompilation using javap\");\n    a();\n    b();\n  }\n\t\n  public static void a() {\n    System.out.println(\"Now we are calling a function...\");\n  }\n\n  public static void b() {\n    System.out.println(\"...and now we are calling b\");\n  }\n}Compile it and then move Foo.java to another directory or delete it if you wish. What can we do with javap and Foo.class?$javap Fooproduces this result:Compiled from \"Foo.java\"\npublic class Foo extends java.lang.Object {\n    public Foo();\n    public static void main(java.lang.String[]);\n    public static void a();\n    public static void b();\n}As you can see the javac compiler doesn't strip any (public) variable name from the .class file. As a result the names of the functions, their parameters and types of return are exposed. (This is necessary in order for other classes to access them.)Let's do a bit more, try:$javap -c FooCompiled from \"Foo.java\"\npublic class Foo extends java.lang.Object{\npublic Foo();\n  Code:\n   0:   aload_0\n   1:   invokespecial   #1; //Method java/lang/Object.\"<init>\":()V\n   4:   return\n\npublic static void main(java.lang.String[]);\n  Code:\n   0:   getstatic       #2; //Field java/lang/System.out:Ljava/io/PrintStream;\n   3:   ldc             #3; //String This is a simple example of decompilation using javap\n   5:   invokevirtual   #4; //Method java/io/PrintStream.println:(Ljava/lang/String;)V\n   8:   invokestatic    #5; //Method a:()V\n   11:  invokestatic    #6; //Method b:()V\n   14:  return\n\npublic static void a();\n  Code:\n   0:   getstatic       #2; //Field java/lang/System.out:Ljava/io/PrintStream;\n   3:   ldc             #7; //String Now we are calling a function...\n   5:   invokevirtual   #4; //Method java/io/PrintStream.println:(Ljava/lang/String;)V\n   8:   return\n\npublic static void b();\n  Code:\n   0:   getstatic       #2; //Field java/lang/System.out:Ljava/io/PrintStream;\n   3:   ldc             #8; //String ...and now we are calling b\n   5:   invokevirtual   #4; //Method java/io/PrintStream.println:(Ljava/lang/String;)V\n   8:   return\n\n}"
}