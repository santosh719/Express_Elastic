{
  "title": "Static methods[edit]",
  "content": "A static method is a method that can be called without an object instance. It can be called on the class directly. For example, the valueOf(String) method of the Integer class is a static method:Code section 3.79: Static method.\n\n\n1 Integer i = Integer.valueOf(\"10\");The static keyword makes attributes instance-agnostic. This means that you cannot reference a static attribute of a single object (because such a specific object attribute doesn't exist). Instead, only one instance of a static attribute exists, whether there is one object in the JVM or one hundred. Here is an example of using a static attribute in a static method:Code section 3.80: Static attribute.\n\n\n1 private static int count = 0;\n2 \n3 public static int getNewInteger() {\n4   return count++;\n5 }You can notice that when you use System.out.println(), out is a static attribute of the System class. A static attribute is related to a class, not to any object instance. This is how Java achieves one universal output stream that we can use to print output. Here is a more complex use case:Code listing 3.14: A static attribute.\n\n\n 1 public class MyProgram {\n 2 \n 3     public static int count = 0;\n 4 \n 5     public static void main (String[] args) {\n 6         MyProgram.count++;\n 7 \n 8         MyProgram program1 = new MyProgram();\n 9         program1.count++;\n10 \n11         MyProgram program2 = new MyProgram();\n12         program2.count++;\n13 \n14         new MyProgram().count++;\n15         System.out.println(MyProgram.count);\n16     }\n17 }\n\n\n\n\n\n\n\n\n\nOutput for Code listing 3.14\n\n4Test your knowledge\n\nQuestion 3.11: Visit the Oracle JavaDoc of the class java.lang.Integer.\nHow many static fields does this class have?\n\nAnswer\n\n4.\n\nint MAX_VALUE,\nint MIN_VALUE,\nint SIZE and\nClass<Integer> TYPE.To learn how to overload and override a method, see Overloading Methods and Constructors."
}