{
  "title": "Throwing and Catching Exceptions",
  "content": "Navigate Exceptions topic:(vde)\n\n Throwing and catching exceptions\n Checked exceptions\n Unchecked exceptions\n Preventing NullPointerException\n Stack trace\n Nesting exceptions (chained exceptions)Language compilers are adept at pointing out most of the erroneous code in a program, however there are some errors that only become apparent when the program is executed. Consider the code listing 6.1; here, the program defines a method divide that does a simple division operation taking two integers as parameter arguments and returning the result of their division. It can safely be assumed that when the divide(4, 2) statement is called, it would return the number 2. However, consider the next statement, where the program relies upon the provided command line arguments to generate a division operation. What if the user provides the number zero (0) as the second argument? We all know that division by zero is impossible, but the compiler couldn't possibly have anticipated the user providing zero as an argument.Code listing 6.1: SimpleDivisionOperation.java\n\n\n 1 public class SimpleDivisionOperation {\n 2   public static void main(String[] args) {\n 3     System.out.println(divide(4, 2));\n 4     if (args.length > 1) {\n 5       int arg0 = Integer.parseInt(args[0]);\n 6       int arg1 = Integer.parseInt(args[1]);\n 7       System.out.println(divide(arg0, arg1));\n 8     }\n 9   }\n10 \n11   public static int divide(int a, int b) {\n12     return a / b;\n13   }\n14 }\n\n\n\n\n\n\n\n\n\nOutput for Code listing 6.1\n\n$ java SimpleDivisionOperation 1 0\n2\nException in thread \"main\" java.lang.ArithmeticException: / by zero\n     at SimpleDivisionOperation.divide(SimpleDivisionOperation.java:12)\n     at SimpleDivisionOperation.main(SimpleDivisionOperation.java:7)Such exceptional code that results in erroneous interpretations at program runtime usually results in errors that are called exceptions in Java. When the Java interpreter encounters an exceptional code, it halts execution and displays information about the error that occurs. This information is known as a stack trace. The stack trace in the above example tells us more about the error, such as the thread  \"main\"  where the exception occurred, the type of exception  java.lang.ArithmeticException, a comprehensible display message  / by zero, and the exact methods and the line numbers where the exception may have occurred."
}