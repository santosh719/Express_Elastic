{
  "title": "abstract[edit]",
  "content": "abstract is a Java keyword. It can be applied to a class and methods. An abstract class cannot be directly instantiated. It must be placed before the variable type or the method return type. It is recommended to place it after the access modifier and after the static keyword. A non-abstract class is a concrete class. An abstract class cannot be final.Only an abstract class can have abstract methods. An abstract method is only declared, not implemented:Code listing 1: AbstractClass.java\n\n\n1 public abstract class AbstractClass {\n2     // This method does not have a body; it is abstract.\n3     public abstract void abstractMethod();\n4  \n5     // This method does have a body; it is implemented in the abstract class and gives a default behavior.\n6     public void concreteMethod() {\n7         System.out.println(\"Already coded.\");\n8     }\n9 }An abstract method cannot be final, static nor native. Either you instantiate a concrete sub-class, either you instantiate the abstract class by implementing its abstract methods alongside a new statement:Code section 1: Abstract class use.\n\n\n1 AbstractClass myInstance = new AbstractClass() {\n2     public void abstractMethod() {\n3         System.out.println(\"Implementation.\");\n4     }\n5 };A private method cannot be abstract."
}