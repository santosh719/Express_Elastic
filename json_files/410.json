{
  "title": "To do:",
  "content": "Navigate Reflection topic: (vde)\n\n Reflection Overview\n Dynamic Class Loading\n Dynamic Method Invocation\n Accessing Private Features with ReflectionWe start with basic transfer object:Code listing 10.1: DummyTo.java\n\n\n 1 package com.test;\n 2  \n 3 public class DummyTo {\n 4     private String name;\n 5     private String address;\n 6  \n 7     public String getName() {\n 8         return name;\n 9     }\n10  \n11     public void setName(String name) {\n12         this.name = name;\n13     }\n14  \n15     public String getAddress() {\n16         return address;\n17     }\n18  \n19     public void setAddress(String address) {\n20         this.address = address;\n21     }\n22  \n23     public DummyTo(String name, String address) {\n24         this.name = name;\n25         this.address = address;\n26     }\n27  \n28     public DummyTo() {\n29         this.name = new String();\n30         this.address = new String();\n31     }\n32  \n33     public String toString(String appendBefore) {\n34         return appendBefore + \" \" + name + \", \" + address;\n35     }\n36 }Following is the example for invoking method from the above mentioned to dynamically. Code is self explanatory.Code listing 10.2: ReflectTest.java\n\n\n 1 package com.test;\n 2  \n 3 import java.lang.reflect.Constructor;\n 4 import java.lang.reflect.InvocationTargetException;\n 5 import java.lang.reflect.Method;\n 6  \n 7 public class ReflectTest {\n 8     public static void main(String[] args) {\n 9         try {\n10             Class<?> dummyClass = Class.forName(\"com.test.DummyTo\");\n11  \n12             // parameter types for methods\n13             Class<?>[] partypes = new Class[]{String.class};\n14  \n15             // Create method object. methodname and parameter types\n16             Method meth = dummyClass.getMethod(\"toString\", partypes);\n17  \n18             // parameter types for constructor\n19             Class<?>[] constrpartypes = new Class[]{String.class, String.class};\n20  \n21             //Create constructor object. parameter types\n22             Constructor<?> constr = dummyClass.getConstructor(constrpartypes);\n23  \n24             // create instance\n25             Object dummyto = constr.newInstance(new Object[]{\"Java Programmer\", \"India\"});\n26  \n27             // Arguments to be passed into method\n28             Object[] arglist = new Object[]{\"I am\"};\n29  \n30             // invoke method!!\n31             String output = (String) meth.invoke(dummyto, arglist);\n32             System.out.println(output);\n33  \n34         } catch (ClassNotFoundException e) {\n35             e.printStackTrace();\n36         } catch (SecurityException e) {\n37             e.printStackTrace();\n38         } catch (NoSuchMethodException e) {\n39             e.printStackTrace();\n40         } catch (IllegalArgumentException e) {\n41             e.printStackTrace();\n42         } catch (IllegalAccessException e) {\n43             e.printStackTrace();\n44         } catch (InvocationTargetException e) {\n45             e.printStackTrace();\n46         } catch (InstantiationException e) {\n47             e.printStackTrace();\n48         }\n49     }\n50 }\n\n\n\n\n\n\n\n\n\nConsole for Code listing 10.2\n\nI am Java Programmer, IndiaConclusion: Above examples demonstrate the invocation of method dynamically using reflection."
}