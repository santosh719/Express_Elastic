{
  "title": "Drawing a simple rectangle[edit]",
  "content": "We now proceed on to our second drawing. A simple rectangle would do it justice, see below for code.Code section 9.5: Drawing a simple rectangle\n\n\n...\npublic class MyCanvas extends Canvas {\n    ...\n    public void paint(Graphics graphics) {\n        graphics.drawRect(10, 10, 100, 100);\n    }\n    ...\n}In the above example, you see how easy it is to draw a simple rectangle using the drawRect(int, int, int, int) method in the Graphics instance that we obtained. Run the program and you will see a simple black outline of a rectangle appearing where once a blank canvas was.The four arguments that are being passed into the method are, in order of appearance, the x-coordinate, the y-coordinate, width and the height. Hence, the resultant rectangle would start painting at the point on the screen 10 pixels from the left and 10 from the top and would be a 100 pixel wide and a 100 pixel in height. To save the argument here, the above drawing is that of a square with equal sides but squares are drawn using the same method and there is no such method as drawSquare(int, int, int)Figure 9.4: Same rectangle drawn with a red outlinePlaying around with colors[edit]You can change the color of the outline by telling the Graphics instance the color you desire. This can be done as follows:Code section 9.6: Changing the outline color of the rectangle\n\n\n...\npublic class MyCanvas extends Canvas {\n    ...\n    public void paint(Graphics graphics) {\n        graphics.setColor(Color.red);\n        graphics.drawRect(100, 100, 500, 500);\n    }\n    ...\n}Running the program would render the same rectangle but with a red colored outline.For the purposes of bringing color to our drawing, we used a method namely the setColor(Color) method. This method comes into force for all the drawing made after its call until another color is set. It asks for an argument of type Color. Now because you have no idea of how to actually instantiate a Color class, the class itself has a few built-in colors. Some built-in colors that you can use are mentioned below.Color.red\nColor.blue\nColor.green\nColor.yellow\nColor.pink\nColor.black\nColor.whiteTry running the program while coding changes to colors for a different colored outline each time. Play around a bit with more colors. Look for the Color class API documentation in the external links at the bottom of the page.Figure 9.5: Same rectangle drawn with a red outline and a yellow fillFilling up the area of the rectangle[edit]Up until now, you have been able to draw a simple rectangle for yourself while asking a question silently, \"why is the outline of the rectangle being painted rather the area as a whole?\" The answer is simple. Any method that starts with drawXxxx(...) only draws the outline. To paint the area within the outline, we use the fillXxxx(...) methods. For instance, the code below would fill a rectangle with yellow color while having a red outline. Notice that the arguments remain the same.Code section 9.7: Drawing a yellow rectangle with a red outline\n\n\n...\npublic class MyCanvas extends Canvas {\n    ...\n    public void paint(Graphics graphics) {\n        graphics.setColor(Color.yellow);\n        graphics.fillRect(10, 10, 100, 100);\n        graphics.setColor(Color.red);\n        graphics.drawRect(10, 10, 100, 100);\n    }\n    ...\n}Figure 9.6: A white circle drawn with a blue outline"
}