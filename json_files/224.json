{
  "title": "Extending interfaces[edit]",
  "content": "Execution of this example on BlueJ.An interface can extend several interfaces, similar to the way that a class can extend another class, using the extends keyword:Code listing 4.18: InterfaceA.java\n\n\n1 public interface InterfaceA {\n2   public void methodA();\n3 }Code listing 4.19: InterfaceB.java\n\n\n1 public interface InterfaceB {\n2   public void methodB();\n3 }Code listing 4.20: InterfaceAB.java\n\n\n1 public interface InterfaceAB extends InterfaceA, InterfaceB {\n2   public void otherMethod();\n3 }This way, a class implementing the InterfaceAB interface has to implement the methodA(), the methodB() and the otherMethod() methods:Code listing 4.21: ClassAB.java\n\n\n 1 public class ClassAB implements InterfaceAB {\n 2   public void methodA() {\n 3     System.out.println(\"A\");\n 4   }\n 5 \n 6   public void methodB() {\n 7     System.out.println(\"B\");\n 8   }\n 9 \n10   public void otherMethod() {\n11     System.out.println(\"foo\");\n12   }\n13 \n14   public static void main(String[] args) {\n15     ClassAB classAb = new ClassAB();\n16     classAb.methodA();\n17     classAb.methodB();\n18     classAb.otherMethod();\n19   }\n20 }Doing so, a ClassAB object can be casted into InterfaceA, InterfaceB and InterfaceAB.Test your knowledge\n\nQuestion 4.2: Consider the following interfaces.\n\n\n\nQuestion 4.2: Walkable.java\n\n\n1 public interface Walkable {\n2     void walk();\n3 }\n\n\n\n\n\n\n\nQuestion 4.2: Jumpable.java\n\n\n1 public interface Jumpable {\n2     void jump();\n3 }\n\n\n\n\n\n\n\nQuestion 4.2: Swimable.java\n\n\n1 public interface Swimable {\n2     void swim();\n3 }\n\n\n\n\n\n\n\nQuestion 4.2: Movable.java\n\n\n1 public interface Movable extends Walkable, Jumpable {\n2 }\n\n\n\n\nList all the methods that an implementing class of Movable should implement.\n\nAnswer\n\n\nwalk()\njump()\n\n\n\n\nAnswer 4.2: Person.java\n\n\n1 public class Person implements Movable {\n2     public void walk() {\n3         System.out.println(\"Do something.\");\n4     }\n5 \n6     public void jump() {\n7         System.out.println(\"Do something.\");\n8     }\n9 }\n\n\n\n\n\n\nQuestion 4.3: Consider the following classes and the following code.\n\n\n\nQuestion 4.3: ConsoleLogger.java\n\n\n1 import java.util.Date;\n2 \n3 public class ConsoleLogger {\n4     public void printLog(String log) {\n5         System.out.println(new Date() + \": \" + log);\n6     }\n7 }\n\n\n\n\n\n\n\nQuestion 4.3: FileLogger.java\n\n\n 1 import java.io.File;\n 2 import java.io.FileOutputStream;\n 3 \n 4 public class FileLogger {\n 5   public void printLog(String log) {\n 6     try {\n 7       File file = new File(\"log.txt\");\n 8       FileOutputStream stream = new FileOutputStream(file);\n 9       byte[] logInBytes = (new Date() + \": \" + log).getBytes();\n10 \n11       stream.write(logInBytes);\n12 \n13       stream.flush();\n14       stream.close();\n15     } catch (Exception e) {\n16       e.printStackTrace();\n17     }\n18   }\n19 }\n\n\n\n\n\n\n\nQuestion 4.3: Common code.\n\n\n1 Object[] loggerArray = new Object[2];\n2 loggerArray[0] = new ConsoleLogger();\n3 loggerArray[1] = new FileLogger();\n4 \n5 for (Object logger : loggerArray) {\n6     // logger.printLog(\"Check point.\");\n7 }\n\n\n\n\nChange the implementation of the code in order to be able to uncomment the commented line without compile error.\n\nAnswer\n\nYou have to create an interface that defines the method printLog(String) and makes ConsoleLogger and FileLogger implement it:\n\n\n\nAnswer 4.3: Logger.java\n\n\n1 public interface Logger {\n2     void printLog(String log);\n3 }\n\n\n\n\n\n\n\nAnswer 4.3: ConsoleLogger.java\n\n\n1 import java.util.Date;\n2 \n3 public class ConsoleLogger implements Logger {\n4     public void printLog(String log) {\n5         System.out.println(new Date() + \": \" + log);\n6     }\n7 }\n\n\n\n\n\n\n\nAnswer 4.3: FileLogger.java\n\n\n 1 import java.io.File;\n 2 import java.io.FileOutputStream;\n 3 \n 4 public class FileLogger implements Logger {\n 5   public void printLog(String log) {\n 6     try {\n 7       File file = new File(\"log.txt\");\n 8       FileOutputStream stream = new FileOutputStream(file);\n 9       byte[] logInBytes = (new Date() + \": \" + log).getBytes();\n10 \n11       stream.write(logInBytes);\n12 \n13       stream.flush();\n14       stream.close();\n15     } catch (Exception e) {\n16       e.printStackTrace();\n17     }\n18   }\n19 }\n\n\n\n\nNow your code has to cast the objects to the Logger type and then you can uncomment the code.\n\n\n\nAnswer 4.3: Common code.\n\n\n1 Logger[] loggerArray = new Logger[2];\n2 loggerArray[0] = new ConsoleLogger();\n3 loggerArray[1] = new FileLogger();\n4 \n5 for (Logger logger : loggerArray) {\n6     logger.printLog(\"Check point.\");\n7 }"
}