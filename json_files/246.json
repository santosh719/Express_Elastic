{
  "title": "Generic method[edit]",
  "content": "A generic type can be defined for just a method:Code section 4.37: Generic method.\n\n\n1 public <D> D assign(Collection<D> generic, D obj) {\n2   generic.add(obj);\n3   return obj;\n4 }Here a new identifier (D) has been chosen at the beginning of the method declaration. The type is specific to a method call and different types can be used for the same object instance:Code section 4.38: Generic method call.\n\n\n1 Collection<Integer> numbers = new ArrayList<Integer>();\n2 Integer number = assign(numbers, new Integer(1));\n3 Collection<String> texts = new ArrayList<String>();\n4 String text = assign(texts, \"Store it.\");The actual type will be defined by the type of the method parameter. Hence, the generic type can't be defined only for the return value as it wouldn't be resolved. See the Class<T> section for a solution.Test your knowledge\n\nQuestion 4.8: Consider the following class.\n\n\n\nQuestion 4.8: Question8.java\n\n\n 1 public class Question8<T> {\n 2   public T item;\n 3  \n 4   public T getItem() {\n 5     return item;\n 6   }\n 7  \n 8   public void setItem(T newItem) {\n 9     item = newItem;\n10   }\n11 \n12   public static void main(String[] args) {\n13     Question8<String> aQuestion = new Question8<String>();\n14     aQuestion.setItem(\"Open your mind.\");\n15     aQuestion.display(aQuestion.getItem());\n16   }\n17 \n18   public void display(String parameter) {\n19     System.out.println(\"Here is the text: \" + parameter);\n20   }\n21 \n22   public void display(Integer parameter) {\n23     System.out.println(\"Here is the number: \" + parameter);\n24   }\n25 \n26   public void display(Object parameter) {\n27     System.out.println(\"Here is the object: \" + parameter);\n28   }\n29 }\n\n\n\n\nWhat will be displayed on the console?\n\nAnswer\n\n\n\n\nConsole for Answer 4.8\n\nHere is the text: Open your mind.\n\n\n\naQuestion.getItem() is typed as a string."
}