{
  "title": "enum[edit]",
  "content": "/** Grades of courses */\n  enum Grade { A, B, C, D, F };\n  // ...\n  private Grade gradeA = Grade.A;This enumeration constant then can be passed in to methods:student.assignGrade(gradeA);\n  /**\n   * Assigns the grade for this course to the student\n   * @param GRADE  Grade to be assigned\n   */\n  public void assignGrade(final Grade GRADE) {\n    grade = GRADE;\n  }An enumeration may also have parameters:public enum DayOfWeek {\n  /** Enumeration constants */\n  MONDAY(1), TUESDAY(2), WEDNESDAY(3), THURSDAY(4), FRIDAY(5), SATURDAY(6), SUNDAY(0);\n\n  /** Code for the days of the week */\n  private byte dayCode = 0;\n\n  /**\n   * Private constructor\n   * @param VALUE  Value that stands for a day of the week.\n   */\n  private DayOfWeek(final byte VALUE) {\n    dayCode = java.lang.Math.abs(VALUE%7);\n  }\n \n  /**\n   * Gets the day code\n   * @return  The day code\n   */\n  public byte getDayCode() {\n    return dayCode;\n  }\n}It is also possible to let an enumeration implement interfaces other than java.lang.Comparable and java.io.Serializable, which are already implicitly implemented by each enumeration:public enum DayOfWeek implements Runnable {\n  MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY, SUNDAY;\n \n  /**\n   * Run method prints all elements\n   */\n  public void run() {\n    System.out.println(\"name() = \" + name() +\n      \", toString() = \\\"\" + toString() + \"\\\"\");\n  }\n}"
}