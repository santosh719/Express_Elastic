{
  "title": "Assignment statements[edit]",
  "content": "Up until now, we've assumed the creation of variables as a single statement. In essence, we assign a value to those variables, and that's just what it is called. When you assign a value to a variable in a statement, that statement is called an assignment statement (also called an initialization statement). Did you notice one more thing? It's the semicolon (;), which is at the end of each statement. A clear indicator that a line of code is a statement is its termination with an ending semicolon. If one was to write multiple statements, it is usually done with each statement on a separate line ending with a semicolon. Consider the example below:Code section 3.3: Multiple assignment statements.\n\n\n1 int a = 10;\n2 int b = 20;\n3 int c = 30;You do not necessarily have to use a new line to write each statement. Just like English, you can begin writing the next statement where you ended the first one as depicted below:Code section 3.4: Multiple assignment statements on the same line.\n\n\n1 int a = 10; int b = 20; int c = 30;However, the only problem with putting multiple statements on one line is, it's very difficult to read it. It doesn't look that intimidating at first, but once you've got a significant amount of code, it's usually better to organize it in a way that makes sense. It would look more complex and incomprehensible written as it is in Listing 3.4.Now that we have looked into the anatomy of a simple assignment statement, we can look back at what we've achieved. We know that...A statement is a unit of code in programming.\nIf we are assigning a variable a value, the statement is called an assignment statement.\nAn assignment statement includes three parts: a data type, the variable name (also called the identifier) and the value of a variable. We will look more into the nature of identifiers and values in the section Variables later.Now, before we move on to the next topic, you need to try and understand what the code below does.Code section 3.5: Multiple assignment statements with expressions.\n\n\n1 int firstNumber = 10;\n2 int secondNumber = 20;\n3 int result = firstNumber + secondNumber;\n4 System.out.println(result);\n5 secondNumber = 30;\n6 System.out.println(result);The first two statements are pretty much similar to those in Section 3.3 but with different variable names. The third however is a bit interesting. We've already talked of variables as being similar to gift boxes. Think of your computer's memory as a shelf where you put all those boxes. Whenever you need a box (or variable), you call its identifier (that's the name of the variable). So calling the variable identifier firstNumber gives you the number 10, calling secondNumber would give you 20 hence when you add the two up, the answer should be 30. That's what the value of the last variable result would be. The part of the third statement where you add the numbers, i.e., firstNumber + secondNumber is called an expression and the expression is what decides what the value is to be. If it's just a plain value, like in the first two statements, then it's called a literal (the value is literally the value, hence the name literal).Note that after the assignment to result its value will not be changed if we assign different values to firstNumber or secondNumber, like in line 5.With the information you have just attained, you can actually write a decent Java program that can sum up values."
}