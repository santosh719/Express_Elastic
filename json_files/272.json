{
  "title": "Exceptions",
  "content": "Navigate Exceptions topic:(vde)\n\n Throwing and catching exceptions\n Checked exceptions\n Unchecked exceptions\n Preventing NullPointerException\n Stack trace\n Nesting exceptions (chained exceptions)The ideal time to catch an error is at compile time, before you even try to run the program. However, not all errors can be detected at compile time. The rest of the problems must be handled at run time through some formality that allows the originator of the error to pass appropriate information to a recipient who will know how to handle the difficulty properly.Improved error recovery is one of the most powerful ways that can increase the robustness of your code. Error recovery is a fundamental concern for every program you write, but it's especially important in Java, where one of the primary goals is to create program components for others to use. To create a robust system, each component must be robust. By providing a consistent error-reporting model using exceptions, Java allows components to reliably communicate problems to client code."
}