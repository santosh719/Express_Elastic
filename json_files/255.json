{
  "title": "Collection",
  "content": "Navigate Aggregate topic: (vde)\n\n Collection\n ArrayList\n Map\n Comparing ObjectsThe most basic collection interface is called Collection. This interface gives the user the generic usage of a collection. All collections need to have the same basic operations. Those are:Adding element(s) to the collection\nRemoving element(s) from the collection\nObtaining the number of elements in the collection\nListing the contents of the collection, (Iterating through the collection)Code listing 5.1: CollectionProgram.java\n\n\n 1 import java.util.Collection;   // Interface\n 2 import java.util.ArrayList;    // Implementation\n 3 \n 4 public class CollectionProgram {\n 5 \n 6   public static void main(String[] args) {\n 7     Collection myCollection = new ArrayList();\n 8     myCollection.add(\"1\");\n 9     myCollection.add(\"2\");\n10     myCollection.add(\"3\");\n11     System.out.println(\"The collection contains \" + myCollection.size() + \" item(s).\");\n12 \n13     myCollection.clear();\n14     if (myCollection.isEmpty()) {\n15       System.out.println(\"The collection is empty.\");\n16     } else {\n17       System.out.println(\"The collection is not empty.\");\n18     }\n19   }\n20 }\n\n\n\n\n\n\n\n\n\nConsole for Code listing 5.1\n\nThe collection contains 3 item(s).\nThe collection is empty.When you put an object in a collection, this object is not actually in the collection. Only its object reference is added to the collection. This means that if an object is changed after it was put in an collection, the object in the collection also changes. The code listing 5.2 computes the seven next days from tomorrow and stores each date in a list to read it afterwards. See what happens:Code listing 5.2: SevenNextDays.java\n\n\n 1 import java.util.ArrayList;\n 2 import java.util.Calendar;\n 3 import java.util.Collection;\n 4 import java.util.Date;\n 5 import java.util.GregorianCalendar;\n 6 \n 7 public class SevenNextDays {\n 8 \n 9   public static void main(String[] args) {\n10    \n11     // The calendar is set at the current date: today\n12     Calendar calendar = new GregorianCalendar();\n13 \n14     Collection collectionOfDays = new ArrayList();\n15     Date currentDate = new Date();\n16     for (int i = 0; i < 7; ++i) {\n17       // The calendar is now set to the next day\n18       calendar.add(Calendar.DATE, 1);\n19       currentDate.setTime(calendar.getTimeInMillis());\n20 \n21       collectionOfDays.add(currentDate);\n22     }\n23 \n24     for (Object oneDay : collectionOfDays) {\n25       System.out.println(\"The next day is: \" + oneDay);\n26     }\n27   }\n28 }\n\n\n\n\n\n\n\n\n\nConsole for Code listing 5.2\n\nThe next day is: Tue Oct 17 4:36:59 UTC 2017\nThe next day is: Tue Oct 17 4:36:59 UTC 2017\nThe next day is: Tue Oct 17 4:36:59 UTC 2017\nThe next day is: Tue Oct 17 4:36:59 UTC 2017\nThe next day is: Tue Oct 17 4:36:59 UTC 2017\nThe next day is: Tue Oct 17 4:36:59 UTC 2017\nThe next day is: Tue Oct 17 4:36:59 UTC 2017All collection items were meant to be updated to a different date but they all have been updated to the last one. This means that each update has updated all the collection items. The currentDate has been used to fill all the collection items. The collection didn't keep trace of the added values (one of the seven dates) but the added object references (currentDate). So the collection contains the same object seven times! To avoid this issue, we should have coded it this way:Code listing 5.3: ActualSevenNextDays.java\n\n\n 1 import java.util.ArrayList;\n 2 import java.util.Calendar;\n 3 import java.util.Collection;\n 4 import java.util.Date;\n 5 import java.util.GregorianCalendar;\n 6 \n 7 public class ActualSevenNextDays {\n 8 \n 9   public static void main(String[] args) {\n10    \n11     // The calendar is set at the current date: today\n12     Calendar calendar = new GregorianCalendar();\n13 \n14     Collection collectionOfDays = new ArrayList();\n15     for (int i = 0; i < 7; ++i) {\n16       Date currentDate = new Date();\n17       // The calendar is now set to the next day\n18       calendar.add(Calendar.DATE, 1);\n19       currentDate.setTime(calendar.getTimeInMillis());\n20 \n21       collectionOfDays.add(currentDate);\n22     }\n23 \n24     for (Object oneDay : collectionOfDays) {\n25       System.out.println(\"The next day is: \" + oneDay);\n26     }\n27   }\n28 }\n\n\n\n\n\n\n\n\n\nConsole for Code listing 5.3\n\nThe next day is: Wed Oct 11 4:36:59 UTC 2017\nThe next day is: Thu Oct 12 4:36:59 UTC 2017\nThe next day is: Fri Oct 13 4:36:59 UTC 2017\nThe next day is: Sat Oct 14 4:36:59 UTC 2017\nThe next day is: Sun Oct 15 4:36:59 UTC 2017\nThe next day is: Mon Oct 16 4:36:59 UTC 2017\nThe next day is: Tue Oct 17 4:36:59 UTC 2017Now each time we add an item to the collection, it is a different instance. All the items evolve separately. To add an object in a collection and avoid this item being changed each time the source object is changed, you have to copy or clone the object before you add it to the collection."
}